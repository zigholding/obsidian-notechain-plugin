/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ZigHolding
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  newTab: true,
  withSelf: true,
  reverse: true,
  field: "NID",
  PrevChain: "10",
  NextChain: "10",
  showLink: true,
  openLink: true,
  refreshDataView: true,
  refreshTasks: true
};
function get_tp_func(app2, target) {
  let templater = app2.plugins.getPlugin(
    "templater-obsidian"
  );
  let items = target.split(".");
  if (items[0].localeCompare("tp") != 0 || items.length != 3) {
    return void 0;
  }
  let modules = templater.templater.functions_generator.internal_functions.modules_array.filter(
    (item) => item.name.localeCompare(items[1]) == 0
  );
  if (modules.length == 0) {
    return void 0;
  }
  return modules[0].static_functions.get(items[2]);
}
var ZigEditor = class {
  constructor(app2) {
    this.app = app2;
  }
  regexp_link(tfile, mode2) {
    if (mode2 === "link") {
      return new RegExp(`\\[\\[${tfile.basename}\\|?.*\\]\\]`, "g");
    }
    if (mode2 === "para") {
      return new RegExp(`.*\\[\\[${tfile.basename}\\|?.*\\]\\].*`, "g");
    }
  }
  replace(tfile, regex, target) {
    this.app.vault.process(tfile, (data) => {
      return data.replace(regex, target);
    });
  }
};
var NoteChain = class {
  constructor(zig, prev = "PrevNote", next = "NextNote") {
    this.zig = zig;
    this.app = zig.app;
    this.prev = prev;
    this.next = next;
    this.dv_api = this.app.plugins.getPlugin(
      "dataview"
    );
  }
  get find_tfile() {
    return get_tp_func(this.app, "tp.file.find_tfile");
  }
  get suggester() {
    return get_tp_func(this.app, "tp.system.suggester");
  }
  get_all_folders(sort_mode = "") {
    let folders = Object.values(
      this.app.vault.fileMap
    ).filter((f) => f.children);
    return folders;
  }
  sort_folders_by_mtime(folders, reverse = true) {
    function ufunc(f) {
      return Math.max(
        ...f.children.filter((f2) => f2.basename).map((f2) => f2.stat.mtime)
      );
    }
    let res = folders.sort((a, b) => ufunc(a) - ufunc(b));
    if (reverse) {
      res = res.reverse();
    }
    return res;
  }
  async move_file_to_another_folder(tfile = this.current_note) {
    let folders = this.get_all_folders();
    folders = this.sort_folders_by_mtime(
      folders
    ).filter((f) => f != tfile.parent);
    if (tfile.extension === "md") {
      let exfolder = [
        this.app.vault.configDir.attachmentFolderPath
      ];
      if (this.app.vault.userIgnoreFilters) {
        for (let x of this.app.vault.userIgnoreFilters) {
          exfolder.push(x);
        }
      }
      for (let x of exfolder) {
        folders = folders.filter((f) => !f.path.startsWith(x));
      }
    }
    try {
      let folder = await this.suggester((f) => f.path, folders);
      let dst = folder.path + "/" + tfile.basename + "." + tfile.extension;
      await app.fileManager.renameFile(tfile, dst);
    } catch (error) {
    }
  }
  get_tfile(path) {
    let name = path.split("|")[0].replace("[[", "").replace("]]", "");
    return this.find_tfile(name);
  }
  get MDFiles() {
    return app.vault.getMarkdownFiles();
  }
  get current_note() {
    return this.app.workspace.getActiveFile();
  }
  get_inlinks(tfile = this.current_note) {
    let res = new Array();
    let inlinks = this.dv_api.index.links.invMap.get(tfile.path);
    if (inlinks == void 0) {
      return [];
    } else {
      return Array.from(inlinks).map(
        (path) => this.app.vault.fileMap[path]
      ).filter(
        (item) => item
      );
    }
  }
  get_outlinks(tfile = this.current_note) {
    let res = new Array();
    let inlinks = this.dv_api.index.links.map.get(tfile.path);
    if (inlinks == void 0) {
      return [];
    } else {
      return Array.from(inlinks).map(
        (path) => this.app.vault.fileMap[path]
      ).filter(
        (item) => item
      );
    }
  }
  get_links(tfile = this.current_note) {
    let inlinks = this.get_inlinks(tfile);
    let outlinks = this.get_outlinks(tfile);
    for (let link of inlinks) {
      if (!outlinks.includes(link)) {
        outlinks.push(link);
      }
    }
    return outlinks;
  }
  get_same_parent(tfile = this.current_note) {
    var _a;
    let notes = (_a = tfile == null ? void 0 : tfile.parent) == null ? void 0 : _a.children.filter(
      (f) => f.basename
    ).filter(
      (f) => f.extension === "md"
    );
    if (!notes) {
      return [];
    }
    return notes;
  }
  async suggester_notes(tfile = this.current_note) {
    let kv = [
      "\u5F53\u524D\u7B14\u8BB0",
      "\u540C\u7EA7\u76EE\u5F55",
      "\u51FA\u94FE+\u5165\u94FE",
      "\u5165\u94FE",
      "\u51FA\u94FE"
    ];
    let mode2 = await this.suggester(kv, kv);
    if (mode2 === "\u5F53\u524D\u7B14\u8BB0") {
      return [tfile];
    } else if (mode2 === "\u540C\u7EA7\u76EE\u5F55") {
      return this.get_same_parent(tfile);
    } else if (mode2 === "\u51FA\u94FE+\u5165\u94FE") {
      return this.get_links(tfile);
    } else if (mode2 === "\u5165\u94FE") {
      return this.get_inlinks(tfile);
    } else if (mode2 === "\u51FA\u94FE") {
      return this.get_outlinks(tfile);
    } else {
      return [];
    }
  }
  get_first_note(tfile) {
    let res = new Array();
    res.push(tfile);
    let tmp = tfile;
    while (true) {
      let prev = this.get_prev_notes(tmp, this.prev, this.next, true);
      if (prev[0] && !res.includes(prev[1][0])) {
        res.unshift(prev[1][0]);
        tmp = prev[1][0];
      } else {
        break;
      }
    }
    return tmp;
  }
  get_last_note(tfile) {
    let res = new Array();
    res.push(tfile);
    let tmp = tfile;
    while (true) {
      let next = this.get_next_notes(tmp, this.prev, this.next, true);
      if (next[0] && !res.includes(next[1][0])) {
        res.push(next[1][0]);
        tmp = next[1][0];
        console.log(tmp);
      } else {
        break;
      }
    }
    return tmp;
  }
  get_file_chain(tfile = this.current_note, prev = 10, next = 10) {
    var _a, _b;
    let res = Array();
    res.push(tfile);
    let tmp = tfile;
    for (let i = prev; i != 0; i--) {
      console.log(i);
      let meta = this.app.metadataCache.getFileCache(tmp);
      if (!meta) {
        break;
      }
      let name = (_a = meta.frontmatter) == null ? void 0 : _a.PrevNote;
      if (!name) {
        break;
      }
      let note = this.get_tfile(name);
      if (!note) {
        break;
      } else if (res.includes(note)) {
        this.set_frontmatter(note, this.next, "");
        this.set_frontmatter(tmp, this.prev, "");
        break;
      } else {
        res.unshift(note);
        tmp = note;
      }
    }
    tmp = tfile;
    for (let i = next; i != 0; i--) {
      let meta = this.app.metadataCache.getFileCache(tmp);
      if (!meta) {
        break;
      }
      let name = (_b = meta.frontmatter) == null ? void 0 : _b.NextNote;
      if (!name) {
        break;
      }
      let note = this.get_tfile(name);
      if (!note) {
        break;
      } else if (res.includes(note)) {
        this.set_frontmatter(note, this.prev, "");
        this.set_frontmatter(tmp, this.next, "");
        break;
      } else {
        res.push(note);
        tmp = note;
      }
    }
  }
  get_prev_notes(tfile, prev = "PrevNote", next = "NextNote", onlyFrontmatter = true) {
    let res = new Array();
    let notes = this.get_links(tfile);
    let meta = this.app.metadataCache.getFileCache(tfile);
    let flag = false;
    if (meta == null ? void 0 : meta.frontmatter) {
      let name = meta.frontmatter[prev];
      if (name) {
        let note = this.get_tfile(name, notes);
        res.push(note);
        flag = true;
      }
    }
    if (onlyFrontmatter) {
      return [flag, res];
    }
    for (let note of notes) {
      if (res.includes(note)) {
        continue;
      }
      if (!note) {
        continue;
      }
      let meta2 = this.app.metadataCache.getFileCache(note);
      if (meta2 == null ? void 0 : meta2.frontmatter) {
        let name = meta2.frontmatter[next];
        if (this.get_tfile(name, [tfile])) {
          res.push(note);
        }
      }
    }
    return [flag, res];
  }
  get_next_notes(tfile, prev = "PrevNote", next = "NextNote", onlyFrontmatter = true) {
    return this.get_prev_notes(tfile, next, prev, onlyFrontmatter);
  }
  get_neighbors(tfile) {
    let tmp = this.get_prev_notes(tfile, this.prev, this.next, true);
    let pflag = tmp[0];
    let prev = tmp[1];
    let tmp2 = this.get_next_notes(tfile, this.prev, this.next, true);
    let nflag = tmp2[0];
    let next = tmp2[1];
    if (pflag && nflag) {
      return [prev[0], next[0]];
    } else if (pflag) {
      return [prev[0], void 0];
    } else if (nflag) {
      return [void 0, next[0]];
    } else {
      return [void 0, void 0];
    }
  }
  async set_frontmatter(tfile, key, value) {
    await this.app.fileManager.processFrontMatter(tfile, (fm) => {
      console.log(`${tfile.basename}---${key}---${value}`);
      fm[key] = value;
    });
  }
  get_frontmatter(tfile, key) {
    let meta = this.app.metadataCache.getFileCache(tfile);
    if (meta == null ? void 0 : meta.frontmatter) {
      return meta.frontmatter[key];
    }
  }
  pop_node(tfile) {
    let neighbor = this.get_neighbors(tfile);
    if (neighbor[0] != null && neighbor[1] != null) {
      this.set_frontmatter(neighbor[0], this.next, `[[${neighbor[1].basename}]]`);
      this.set_frontmatter(neighbor[1], this.prev, `[[${neighbor[0].basename}]]`);
    } else if (neighbor[0] != null) {
      this.set_frontmatter(neighbor[0], this.next, ``);
    } else if (neighbor[1] != null) {
      this.set_frontmatter(neighbor[1], this.prev, ``);
    }
  }
  insert_node_as_head(tfile, anchor) {
    if (head == tfile) {
      return;
    }
    let head = this.get_first_note(anchor);
    this.set_frontmatter(tfile, this.next, `[[${head.basename}]]`);
    this.set_frontmatter(head, this.prev, `[[${tfile.basename}]]`);
  }
  insert_node_as_tail(tfile, anchor) {
    let tail = this.get_last_note(anchor);
    if (tfile == tail) {
      return;
    }
    this.set_frontmatter(tfile, this.prev, `[[${tail.basename}]]`);
    this.set_frontmatter(tail, this.next, `[[${tfile.basename}]]`);
  }
  insert_node_after(tfile, anchor) {
    let next = this.get_next_notes(anchor, this.prev, this.next, true);
    if (next[0] && next[1][0] != tfile && next[1][0] != anchor) {
      this.set_frontmatter(next[1][0], this.prev, `[[${tfile.basename}]]`);
      this.set_frontmatter(tfile, this.next, `[[${next[1][0].basename}]]`);
    }
    this.set_frontmatter(tfile, this.prev, `[[${anchor.basename}]]`);
    this.set_frontmatter(anchor, this.next, `[[${tfile.basename}]]`);
  }
  insert_node_before(tfile, anchor) {
    let prev = this.get_prev_notes(anchor, this.prev, this.next, true);
    if (prev[0] && prev[1][0] != tfile && prev[1][0] != anchor) {
      this.set_frontmatter(prev[1][0], this.next, `[[${tfile.basename}]]`);
      this.set_frontmatter(tfile, this.prev, `[[${prev[1][0].basename}]]`);
    }
    this.set_frontmatter(tfile, this.next, `[[${anchor.basename}]]`);
    this.set_frontmatter(anchor, this.prev, `[[${tfile.basename}]]`);
  }
  async rechain_folder(tfolder = null, mode2 = "suggester") {
    let notes = this.get_same_parent();
    let files = await this.suggester_sort(notes);
    for (let i = 0; i < files.length - 1; i++) {
      if (!(this.get_frontmatter(files[i], this.next) === `[[${files[i + 1].basename}]]`)) {
        this.set_frontmatter(files[i], this.next, `[[${files[i + 1].basename}]]`);
      }
      if (!(this.get_frontmatter(files[i + 1], this.prev) === `[[${files[i].basename}]]`)) {
        this.set_frontmatter(files[i + 1], this.prev, `[[${files[i].basename}]]`);
      }
    }
  }
  sort_tfiles(files, field) {
    if (typeof field === "string") {
      if (field.localeCompare("name") == 0) {
        return files.sort(
          (a, b) => a.name.localeCompare(b.name)
        );
      } else if (field.localeCompare("mtime") == 0) {
        return files.sort(
          (a, b) => a.stat.mtime - b.stat.mtime
        );
      } else if (field.localeCompare("ctime") == 0) {
        return files.sort(
          (a, b) => a.stat.ctime - b.stat.ctime
        );
      }
      return files;
    } else if (typeof field === "object") {
      if (field instanceof Array) {
        let nfiles = this.sort_tfiles(files, field[0]);
        if (field.length >= 2) {
          if (field[1] === "x") {
            return nfiles.reverse();
          }
        }
        return nfiles;
      }
    }
    return files;
  }
  sort_tfiles_by_chain(files) {
  }
  sort_tfiles_by_field(files, field) {
    let res = files.sort(
      (a, b) => {
        let ameta = this.app.metadataCache.getFileCache(a).frontmatter;
        let bmeta = this.app.metadataCache.getFileCache(b).frontmatter;
        if (!ameta && !bmeta) {
          return 0;
        } else if (!ameta) {
          return bmeta[field];
        } else if (!bmeta) {
          return ameta[mode];
        } else {
          return ameta[field] - bmeta[field];
        }
      }
    );
    return res;
  }
  async suggester_sort(tfiles) {
    if (!tfiles) {
      return [];
    }
    if (tfiles.length == 0) {
      return [];
    }
    ;
    let kv = {
      "name": "name",
      "ctime": "ctime",
      "mtime": "mtime",
      "name \u5012\u5E8F": ["name", "x"],
      "ctime \u5012\u5E8F": ["ctime", "x"],
      "mtime \u5012\u5E8F": ["mtime", "x"]
    };
    let field = await this.suggester(
      Object.keys(kv),
      Object.values(kv)
    );
    return this.sort_tfiles(tfiles, field);
  }
};
var ZigHolding = class extends import_obsidian.Plugin {
  async onload() {
    this.chain = new NoteChain(this);
    this.editor = new ZigEditor(this.app);
    this.app.zig = this;
    await this.loadSettings();
    this.dataview = await this.app.plugins.getPlugin(
      "dataview"
    );
    this.templater = await this.app.plugins.getPlugin(
      "templater-obsidian"
    );
    this.addCommand({
      id: "chain_insert_node",
      name: "Chain-->\u63D2\u5165\u8282\u70B9",
      callback: () => {
        this.chain_insert_node();
      }
    });
    this.addCommand({
      id: "chain_set_seq_note",
      name: "Chian-->\u91CD\u7F6E\u5F53\u524D\u7B14\u8BB0\u6240\u5728\u76EE\u5F55\u94FE\u6761\uFF0C\u4F1A\u6E05\u9664\u4F60\u7684\u8BBE\u7F6E\uFF0C\u614E\u7528\uFF01",
      callback: () => {
        this.chain.rechain_folder();
      }
    });
    this.addCommand({
      id: "open_notes_in_same_folder",
      name: "Open-->\u6253\u5F00\u76EE\u5F55\u7B14\u8BB0",
      callback: () => {
        this.open_notes_in_same_folder();
      }
    });
    this.addCommand({
      id: "open_note_chain",
      name: "Chain-->\u6253\u5F00\u7B14\u8BB0\u94FE\u6761",
      callback: () => {
        this.open_note_chain();
      }
    });
    this.addCommand({
      id: "clear_inlinks",
      name: "\u6574\u7406-->\u6E05\u7406\u5165\u94FE",
      callback: () => {
        this.clear_inlinks();
      }
    });
    this.addCommand({
      id: "move_file_to_another_folder",
      name: "\u6574\u7406-->\u79FB\u52A8\u5230\u5176\u5B83\u6587\u4EF6\u5939",
      callback: () => {
        this.chain.move_file_to_another_folder();
      }
    });
    this.addCommand({
      id: "replace_notes_with_regx",
      name: "\u6574\u7406-->\u6B63\u5219\u8868\u8FBE\u5F0F\u6279\u91CF\u66FF\u6362",
      callback: () => {
        this.replace_notes_with_regx();
      }
    });
    this.addSettingTab(new ZigSettingTab(this.app, this));
    console.log("Zig-Holding:regeister ufunc_on_file_open");
    this.app.workspace.on("file-open", this.ufunc_on_file_open);
  }
  onunload() {
    console.log("Zig-Holding:unregeister ufunc_on_file_open");
    this.app.workspace.off("file-open", this.ufunc_on_file_open);
  }
  async ufunc_on_file_open(file) {
    let zh = await app.plugins.getPlugin("zig-holding");
    if (!zh) {
      return;
    }
    if (zh.settings.refreshDataView) {
      zh.app.commands.executeCommandById(
        "dataview:dataview-force-refresh-views"
      );
    }
    if (zh.settings.refreshTasks) {
      let target = await app.plugins.getPlugin("obsidian-tasks-plugin");
      target.cache.notifySubscribers();
    }
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async clear_inlinks(tfile = this.chain.current_note, mode2 = "suggester") {
    let notes = this.chain.get_inlinks(tfile);
    if (notes.length) {
      if (mode2 === "suggester") {
        mode2 = await this.suggester(
          ["\u5220\u9664\u94FE\u63A5", "\u66FF\u6362\u94FE\u63A5", "\u5220\u9664\u6BB5\u843D"],
          [["link", "del"], ["link", "rep"], ["para", "rep"]]
        );
      }
      let reg = this.editor.regexp_link(tfile, mode2[0]);
      if (reg) {
        for (let note of notes) {
          let target;
          if (mode2[1] === "rep") {
            target = tfile.basename;
          } else {
            target = "";
          }
          this.editor.replace(note, reg, target);
        }
      }
    }
  }
  async replace_notes_with_regx() {
    let notes = await this.chain.suggester_notes();
    if ((notes == null ? void 0 : notes.length) > 0) {
      let prompt2 = get_tp_func(this.app, "tp.system.prompt");
      let regs = await prompt2("\u8981\u66FF\u6362\u7684\u6B63\u5219\u8868\u8FBE\u5F0F");
      let reg = new RegExp(regs, "g");
      console.log(regs, reg);
      let target = await prompt2("\u76EE\u6807\u5B57\u7B26\u4E32");
      for (let note of notes) {
        this.editor.replace(note, reg, target);
      }
    }
  }
  get_tfile(path) {
    let files = app.vault.getMarkdownFiles();
    if (files.includes(path)) {
      return files[path];
    }
    for (let file of files) {
      if (file.name.toLowerCase().localeCompare(path.toLowerCase()) == 0) {
        return file;
      }
      if (file.basename.toLowerCase().localeCompare(path.toLowerCase()) == 0) {
        return file;
      }
      if (`[[${file.basename.toLowerCase()}]]`.localeCompare(path.toLowerCase()) == 0) {
        return file;
      }
    }
    return null;
  }
  get_tfile_config(tfile, suffix = "_config") {
    return this.get_tfile(tfile.basename + suffix);
  }
  async select_value_of_list(targets, prompt2 = null) {
    const target = await this.suggester(
      targets,
      targets,
      false,
      prompt2
    );
    return target;
  }
  async chain_insert_node() {
    let curr = app.workspace.getActiveFile();
    let filteredFiles = app.vault.getMarkdownFiles().sort(
      (a, b) => b.stat.mtime - a.stat.mtime
    );
    if (!this.settings.allFiles) {
      filteredFiles = filteredFiles.filter(
        (file) => file != curr && file.parent == curr.parent
      );
    } else {
      filteredFiles = filteredFiles.filter(
        (file) => file != curr
      );
    }
    const note = await this.suggester(
      (file) => this.tfile_to_string(
        file,
        this.settings.showLink ? ["PrevNote", "NextNote"] : [],
        "			\u26A1  "
      ),
      filteredFiles
    );
    if (!note) {
      return;
    }
    let mode2 = await this.select_value_of_list([
      "insert_node_after",
      "insert_node_before",
      "insert_node_as_head",
      "insert_node_as_tail"
    ], prompt = "Select Node Insert Mode.");
    if (!mode2) {
      return;
    }
    console.log(typeof mode2, mode2);
    if (this.settings.popFirst) {
      this.chain.pop_node(curr);
    }
    if (mode2 === "insert_node_as_head") {
      this.chain.insert_node_as_head(curr, note);
    } else if (mode2 === "insert_node_as_tail") {
      this.chain.insert_node_as_tail(curr, note);
    } else if (mode2 === "insert_node_before") {
      this.chain.insert_node_before(curr, note);
    } else if (mode2 === "insert_node_after") {
      this.chain.insert_node_after(curr, note);
    } else {
      return;
    }
    if (this.settings.openLink) {
      if (note) {
        if (this.settings.newTab) {
          this.app.workspace.getLeaf(true).openFile(note);
        } else {
          this.app.workspace.activeLeaf.openFile(note);
        }
      }
    }
  }
  tfile_to_string(tfile, fields, seq) {
    let meta = this.app.metadataCache.getFileCache(tfile);
    let items = new Array();
    items.push(tfile.basename);
    for (let field of fields) {
      try {
        items.push(meta.frontmatter[field]);
      } catch (error) {
        items.push("-");
      }
    }
    return items.join(seq);
  }
  async open_notes_in_same_folder() {
    let curr = this.app.workspace.getActiveFile();
    const filteredFiles_ = this.app.vault.getMarkdownFiles().filter(
      (file) => {
        var _a;
        return file != curr | ((_a = this.settings) == null ? void 0 : _a.withSelf) && file.path.startsWith(curr.parent.path);
      }
    );
    let filteredFiles = this.chain.sort_tfiles(
      filteredFiles_,
      this.settings.field
    );
    const note = await this.suggester(
      (file) => file.path.slice(curr.parent.path.length + 1).slice(0, -3),
      filteredFiles
    );
    if (note) {
      if (this.settings.newTab) {
        app.workspace.getLeaf(true).openFile(note);
      } else {
        app.workspace.activeLeaf.openFile(note);
      }
    }
  }
  get suggester() {
    return get_tp_func(this.app, "tp.system.suggester");
  }
  get_file_chain(curr = null, prev = 10, next = 10, sameFolder = false) {
    var _a, _b;
    if (curr === null) {
      curr = this.app.workspace.getActiveFile();
    }
    let res = Array();
    res.push(curr);
    let tmp = curr;
    for (let i = prev; i != 0; i--) {
      let meta = this.app.metadataCache.getFileCache(tmp);
      if (!meta) {
        break;
      }
      let name = (_a = meta.frontmatter) == null ? void 0 : _a.PrevNote;
      if (!name) {
        break;
      }
      let note = this.get_tfile(name);
      if (!note | res.includes(note)) {
        break;
      } else {
        res.unshift(note);
        tmp = note;
      }
    }
    tmp = curr;
    for (let i = next; i != 0; i--) {
      let meta = this.app.metadataCache.getFileCache(tmp);
      if (!meta) {
        break;
      }
      let name = (_b = meta.frontmatter) == null ? void 0 : _b.NextNote;
      if (!name) {
        break;
      }
      let note = this.get_tfile(name);
      if (!note | res.includes(note)) {
        break;
      } else {
        res.push(note);
        tmp = note;
      }
    }
    if (sameFolder) {
      res.push(null);
      let afiles = this.app.vault.getMarkdownFiles();
      for (let f of afiles) {
        if (f.parent == (curr == null ? void 0 : curr.parent)) {
          if (!res.includes(f)) {
            res.push(f);
          }
        }
      }
      res = res.filter(
        (file) => file === null | (file == null ? void 0 : file.path.startsWith(curr.parent.path))
      );
    }
    return res;
  }
  async open_note_chain() {
    let curr = this.app.workspace.getActiveFile();
    let files = this.get_file_chain(
      curr,
      Number(this.settings.PrevChain),
      Number(this.settings.NextChain),
      this.settings.sameFolder
    );
    const note = await this.suggester(
      (file) => {
        if (!file) {
          return "-----\u{1F4C2}-----";
        } else if (file == curr) {
          return `\u{1F3E0} ${curr.basename}`;
        } else {
          return file.path.slice(curr.parent.path.length + 1).slice(0, -3);
        }
      },
      files
    );
    if (note) {
      if (this.settings.newTab) {
        this.app.workspace.getLeaf(true).openFile(note);
      } else {
        this.app.workspace.activeLeaf.openFile(note);
      }
    }
  }
};
var ZigSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h1", { text: "Zig Holding" });
    containerEl.createEl("h3", { text: "Switch Note" });
    new import_obsidian.Setting(containerEl).setName("newTab").setDesc("\u662F\u5426\u5728\u65B0\u6807\u7B7E\u4E2D\u6253\u5F00\u7B14\u8BB0?").addToggle(
      (text) => text.setValue(this.plugin.settings.newTab).onChange(async (value) => {
        this.plugin.settings.newTab = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("withSelf").setDesc("\u662F\u5426\u663E\u793A\u5F53\u524D\u7B14\u8BB0?").addToggle(
      (text) => text.setValue(this.plugin.settings.withSelf).onChange(async (value) => {
        this.plugin.settings.withSelf = value;
        await this.plugin.saveSettings();
      })
    );
    containerEl.createEl("h4", { text: "Open note in same folder" });
    new import_obsidian.Setting(containerEl).setName("reverse").setDesc("\u662F\u5426\u9006\u5411\u6392\u5E8F?").addToggle(
      (text) => text.setValue(this.plugin.settings.reverse).onChange(async (value) => {
        this.plugin.settings.reverse = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("field").setDesc("\u7B14\u8BB0\u6392\u5E8F\u5B57\u6BB5\uFF1Amtime\uFF0C\u4FEE\u6539\u65F6\u95F4\uFF1Bctime\uFF0C\u521B\u5EFA\u65F6\u95F4\uFF1Bname,\u6587\u4EF6\u540D\uFF1B\u6216\u5176\u5B83\u5143\u6570\u636E\u5B57\u6BB5\u3002").addText((text) => text.setValue(this.plugin.settings.field).onChange(async (value) => {
      this.plugin.settings.field = value;
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("h4", { text: "Open note chain" });
    new import_obsidian.Setting(containerEl).setName("PrevChain").setDesc("\u524D\u7F6E\u7B14\u8BB0\u6570\u76EE").addText((text) => text.setValue(this.plugin.settings.PrevChain).onChange(async (value) => {
      this.plugin.settings.PrevChain = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("NextChain").setDesc("\u540E\u7F6E\u7B14\u8BB0\u6570\u76EE").addText((text) => text.setValue(this.plugin.settings.NextChain).onChange(async (value) => {
      this.plugin.settings.NextChain = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("sameFolder").setDesc("\u4EC5\u663E\u793A\u5F53\u524D\u6587\u4EF6\u5939\u4E2D\u94FE\u8DEF\uFF0C\u540C\u65F6\u5C55\u793A\u4E0D\u5728\u94FE\u8DEF\u7684\u6587\u4EF6").addToggle(
      (text) => text.setValue(this.plugin.settings.sameFolder).onChange(async (value) => {
        this.plugin.settings.sameFolder = value;
        await this.plugin.saveSettings();
      })
    );
    containerEl.createEl("h3", { text: "Note Chain" });
    new import_obsidian.Setting(containerEl).setName("showLink").setDesc("\u662F\u5426\u9009\u62E9\u65F6\u663E\u793A\u7B14\u8BB0\u94FE\u63A5").addToggle(
      (text) => text.setValue(this.plugin.settings.showLink).onChange(async (value) => {
        this.plugin.settings.showLink = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("popFirst").setDesc("\u63D2\u5165\u524D\u94FE\u63A5\u5F53\u524D\u7B14\u8BB0\u524D\u540E\u7F6E\u7B14\u8BB0").addToggle(
      (text) => text.setValue(this.plugin.settings.popFirst).onChange(async (value) => {
        this.plugin.settings.popFirst = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("openLink").setDesc("\u9009\u62E9\u540E\u662F\u5426\u6253\u5F00\u7B14\u8BB0").addToggle(
      (text) => text.setValue(this.plugin.settings.openLink).onChange(async (value) => {
        this.plugin.settings.openLink = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("allFiles").setDesc("\u662F\u5426\u4ECE\u6240\u6709\u7B14\u8BB0\u4E2D\u9009\u62E9").addToggle(
      (text) => text.setValue(this.plugin.settings.allFiles).onChange(async (value) => {
        this.plugin.settings.allFiles = value;
        await this.plugin.saveSettings();
      })
    );
    containerEl.createEl("h3", { text: "\u521D\u59CB\u5316" });
    new import_obsidian.Setting(containerEl).setName("refreshDataView").setDesc("\u6253\u5F00\u65B0\u7B14\u8BB0\u65F6\u5237\u65B0Dataview\uFF1F").addToggle(
      (text) => text.setValue(this.plugin.settings.refreshDataView).onChange(async (value) => {
        this.plugin.settings.refreshDataView = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("refreshTasks").setDesc("\u6253\u5F00\u65B0\u7B14\u8BB0\u65F6\u5237\u65B0Tasks\uFF1F").addToggle(
      (text) => text.setValue(this.plugin.settings.refreshTasks).onChange(async (value) => {
        this.plugin.settings.refreshTasks = value;
        await this.plugin.saveSettings();
      })
    );
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgXHJcblx0QXBwLCBFZGl0b3IsIE1hcmtkb3duVmlldywgTW9kYWwsIE5vdGljZSwgXHJcblx0UGx1Z2luLCBQbHVnaW5TZXR0aW5nVGFiLCBTZXR0aW5nLFxyXG5cdERhdGF2aWV3UGx1Z2luLFxyXG5cdFRGaWxlLFRGb2xkZXJcclxufSBmcm9tICdvYnNpZGlhbic7XHJcblxyXG4vLyBSZW1lbWJlciB0byByZW5hbWUgdGhlc2UgY2xhc3NlcyBhbmQgaW50ZXJmYWNlcyFcclxuXHJcbmludGVyZmFjZSBaaWdTZXR0aW5ncyB7XHJcblx0bmV3VGFiOiBib29sZWFuO1xyXG5cdHdpdGhTZWxmOmJvb2xlYW47XHJcblx0cmV2ZXJzZTpib29sZWFuO1xyXG5cdGZpZWxkOnN0cmluZztcclxuXHRQcmV2Q2hhaW46c3RyaW5nO1xyXG5cdE5leHRDaGFpbjpzdHJpbmc7XHJcblx0c2hvd0xpbms6Ym9vbGVhbjtcclxuXHRvcGVuTGluazpib29sZWFuO1xyXG5cdHJlZnJlc2hEYXRhVmlldzpib29sZWFuO1xyXG5cdHJlZnJlc2hUYXNrczpib29sZWFuLFxyXG59XHJcblxyXG5jb25zdCBERUZBVUxUX1NFVFRJTkdTOiBaaWdTZXR0aW5ncyA9IHtcclxuXHRuZXdUYWIgOiB0cnVlLFxyXG5cdHdpdGhTZWxmIDogdHJ1ZSxcclxuXHRyZXZlcnNlIDogdHJ1ZSxcclxuXHRmaWVsZCA6IFwiTklEXCIsXHJcblx0UHJldkNoYWluIDogXCIxMFwiLFxyXG5cdE5leHRDaGFpbiA6IFwiMTBcIixcclxuXHRzaG93TGluayA6IHRydWUsXHJcblx0b3BlbkxpbmsgOiB0cnVlLFxyXG5cdHJlZnJlc2hEYXRhVmlldyA6IHRydWUsXHJcblx0cmVmcmVzaFRhc2tzIDogdHJ1ZVxyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRfdHBfZnVuYyhhcHA6QXBwLHRhcmdldDpzdHJpbmcpIHtcclxuXHQvLyBcdTgzQjdcdTUzRDYgIHRlbXBsYXRlciBcdTUxRkRcdTY1NzBcclxuXHQvLyBnZXRfdHBfZnVuYyhcInRwLnN5c3RlbS5wcm9tcHRcIilcclxuXHJcblx0bGV0IHRlbXBsYXRlciA9IGFwcC5wbHVnaW5zLmdldFBsdWdpbihcclxuXHRcdFwidGVtcGxhdGVyLW9ic2lkaWFuXCJcclxuXHQpO1xyXG5cclxuXHRsZXQgaXRlbXMgPSB0YXJnZXQuc3BsaXQoXCIuXCIpO1xyXG5cdGlmKGl0ZW1zWzBdLmxvY2FsZUNvbXBhcmUoXCJ0cFwiKSE9MCB8fCBpdGVtcy5sZW5ndGghPTMpe3JldHVybiB1bmRlZmluZWQ7fVxyXG5cdFxyXG5cdGxldCBtb2R1bGVzID0gdGVtcGxhdGVyLnRlbXBsYXRlci5mdW5jdGlvbnNfZ2VuZXJhdG9yLlxyXG5cdFx0aW50ZXJuYWxfZnVuY3Rpb25zLm1vZHVsZXNfYXJyYXkuZmlsdGVyKFxyXG5cdFx0XHQoaXRlbSk9PihpdGVtLm5hbWUubG9jYWxlQ29tcGFyZShpdGVtc1sxXSk9PTApXHJcblx0XHQpO1xyXG5cclxuXHRpZihtb2R1bGVzLmxlbmd0aD09MCl7cmV0dXJuIHVuZGVmaW5lZH1cclxuXHRcclxuXHRyZXR1cm4gbW9kdWxlc1swXS5zdGF0aWNfZnVuY3Rpb25zLmdldChpdGVtc1syXSk7XHJcbn1cclxuXHJcblxyXG5cclxuY2xhc3MgWmlnRWRpdG9ye1xyXG5cdGFwcDpBcHA7XHJcblxyXG5cdGNvbnN0cnVjdG9yKGFwcDpBcHApe1xyXG5cdFx0dGhpcy5hcHAgPSBhcHA7XHJcblx0fVxyXG5cclxuXHRyZWdleHBfbGluayh0ZmlsZTpURmlsZSxtb2RlOnN0cmluZyl7XHJcblx0XHQvL1tbbm90ZXx8YWxpYXNdXVxyXG5cdFx0aWYobW9kZT09PSdsaW5rJyl7XHJcblx0XHRcdHJldHVybiBuZXcgUmVnRXhwKGBcXFxcW1xcXFxbJHt0ZmlsZS5iYXNlbmFtZX1cXFxcfD8uKlxcXFxdXFxcXF1gLCdnJyk7XHJcblx0XHR9XHJcblx0XHRcclxuXHRcdC8vcGFyYWdyYXBoXHJcblx0XHRpZihtb2RlPT09J3BhcmEnKXtcclxuXHRcdFx0cmV0dXJuIG5ldyBSZWdFeHAoYC4qXFxcXFtcXFxcWyR7dGZpbGUuYmFzZW5hbWV9XFxcXHw/LipcXFxcXVxcXFxdLipgLCdnJyk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRyZXBsYWNlKHRmaWxlOlRGaWxlLHJlZ2V4OlJlZ0V4cCx0YXJnZXQ6c3RyaW5nKXtcclxuXHRcdHRoaXMuYXBwLnZhdWx0LnByb2Nlc3ModGZpbGUsKGRhdGEpPT57XHJcblx0XHRcdHJldHVybiBkYXRhLnJlcGxhY2UocmVnZXgsIHRhcmdldCk7XHJcblx0XHR9KVxyXG5cdH1cclxufVxyXG5cclxuY2xhc3MgTm90ZUNoYWlue1xyXG5cdHppZzpaaWdIb2xkaW5nO1xyXG5cdGFwcDpBcHA7XHJcblx0cHJldjpzdHJpbmc7XHJcblx0bmV4dDpzdHJpbmc7XHJcblxyXG5cdGNvbnN0cnVjdG9yKHppZzpaaWdIb2xkaW5nLHByZXY9XCJQcmV2Tm90ZVwiLG5leHQ9XCJOZXh0Tm90ZVwiKSB7XHJcblx0XHR0aGlzLnppZyA9IHppZztcclxuXHRcdHRoaXMuYXBwID0gemlnLmFwcDtcclxuXHRcdHRoaXMucHJldiA9IHByZXY7XHJcblx0XHR0aGlzLm5leHQgPSBuZXh0O1xyXG5cclxuXHRcdHRoaXMuZHZfYXBpID0gdGhpcy5hcHAucGx1Z2lucy5nZXRQbHVnaW4oXHJcblx0XHRcdFwiZGF0YXZpZXdcIlxyXG5cdFx0KTtcclxuXHR9XHJcblxyXG5cdGdldCBmaW5kX3RmaWxlKCl7XHJcblx0XHRyZXR1cm4gZ2V0X3RwX2Z1bmModGhpcy5hcHAsJ3RwLmZpbGUuZmluZF90ZmlsZScpO1xyXG5cclxuXHR9XHJcblxyXG5cdGdldCBzdWdnZXN0ZXIoKXtcclxuXHRcdHJldHVybiBnZXRfdHBfZnVuYyh0aGlzLmFwcCwndHAuc3lzdGVtLnN1Z2dlc3RlcicpO1xyXG5cdH1cclxuXHJcblx0Z2V0X2FsbF9mb2xkZXJzKHNvcnRfbW9kZT0nJyl7XHJcblx0XHRsZXQgZm9sZGVycyA9IE9iamVjdC52YWx1ZXModGhpcy5hcHAudmF1bHQuZmlsZU1hcFxyXG5cdFx0KS5maWx0ZXIoZj0+Zi5jaGlsZHJlbilcclxuXHRcdHJldHVybiBmb2xkZXJzO1xyXG5cdH1cclxuXHRcclxuXHRzb3J0X2ZvbGRlcnNfYnlfbXRpbWUoZm9sZGVyczpBcnJheTxURm9sZGVyPixyZXZlcnNlPXRydWUpe1xyXG5cdFx0ZnVuY3Rpb24gdWZ1bmMoZjpURm9sZGVyKXtcclxuXHRcdFx0cmV0dXJuIE1hdGgubWF4KFxyXG5cdFx0XHRcdC4uLmYuY2hpbGRyZW4uZmlsdGVyKGY9PmYuYmFzZW5hbWUpLm1hcChmPT5mLnN0YXRcclxuXHRcdFx0XHQubXRpbWUpXHJcblx0XHRcdClcclxuXHRcdH1cclxuXHRcdGxldCByZXMgPSBmb2xkZXJzLnNvcnQoKGEsYik9PnVmdW5jKGEpLXVmdW5jKGIpKTtcclxuXHRcdGlmKHJldmVyc2Upe1xyXG5cdFx0XHRyZXMgPSByZXMucmV2ZXJzZSgpO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHJlcztcclxuXHR9XHJcblxyXG5cdGFzeW5jIG1vdmVfZmlsZV90b19hbm90aGVyX2ZvbGRlcih0ZmlsZT10aGlzLmN1cnJlbnRfbm90ZSl7XHJcblx0XHRsZXQgZm9sZGVycyA9IHRoaXMuZ2V0X2FsbF9mb2xkZXJzKCk7XHJcblx0XHRmb2xkZXJzID0gdGhpcy5zb3J0X2ZvbGRlcnNfYnlfbXRpbWUoZm9sZGVyc1xyXG5cdFx0KS5maWx0ZXIoZj0+ZiE9dGZpbGUucGFyZW50KTtcclxuXHJcblx0XHRpZih0ZmlsZS5leHRlbnNpb249PT0nbWQnKXtcclxuXHRcdFx0bGV0IGV4Zm9sZGVyID0gW1xyXG5cdFx0XHRcdHRoaXMuYXBwLnZhdWx0LmNvbmZpZ0Rpci5hdHRhY2htZW50Rm9sZGVyUGF0aFxyXG5cdFx0XHRdO1xyXG5cdFx0XHRpZih0aGlzLmFwcC52YXVsdC51c2VySWdub3JlRmlsdGVycyl7XHJcblx0XHRcdFx0Zm9yKGxldCB4IG9mIHRoaXMuYXBwLnZhdWx0LnVzZXJJZ25vcmVGaWx0ZXJzKXtcclxuXHRcdFx0XHRcdGV4Zm9sZGVyLnB1c2goeCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdFxyXG5cdFx0XHRmb3IobGV0IHggb2YgZXhmb2xkZXIpe1xyXG5cdFx0XHRcdGZvbGRlcnMgPSBmb2xkZXJzLmZpbHRlcihmPT4hZi5wYXRoLnN0YXJ0c1dpdGgoeCkpXHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdHRyeSB7XHJcblx0XHRcdGxldCBmb2xkZXIgPSBhd2FpdCB0aGlzLnN1Z2dlc3RlcigoZik9PmYucGF0aCxmb2xkZXJzKTtcclxuXHRcdFx0Ly8gXHU3OUZCXHU1MkE4XHU3QjE0XHU4QkIwXHJcblx0XHRcdGxldCBkc3QgPSBmb2xkZXIucGF0aCtcIi9cIit0ZmlsZS5iYXNlbmFtZStcIi5cIit0ZmlsZS5leHRlbnNpb247XHJcblx0XHRcdGF3YWl0IGFwcC5maWxlTWFuYWdlci5yZW5hbWVGaWxlKHRmaWxlLGRzdCk7XHJcblx0XHR9IGNhdGNoIChlcnJvcikge1xyXG5cdFx0XHRcclxuXHRcdH1cclxuXHRcdFxyXG5cclxuXHR9XHJcblxyXG5cdGdldF90ZmlsZShwYXRoKXtcclxuXHRcdGxldCBuYW1lID0gcGF0aC5zcGxpdCgnfCcpWzBdLnJlcGxhY2UoJ1tbJywnJykucmVwbGFjZSgnXV0nLCcnKTtcclxuXHRcdHJldHVybiB0aGlzLmZpbmRfdGZpbGUobmFtZSk7XHJcblx0fVxyXG5cclxuXHRnZXQgTURGaWxlcygpe1xyXG5cdFx0cmV0dXJuIGFwcC52YXVsdC5nZXRNYXJrZG93bkZpbGVzKCk7XHJcblx0fVxyXG5cclxuXHRnZXQgY3VycmVudF9ub3RlKCl7XHJcblx0XHRyZXR1cm4gdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZUZpbGUoKTtcclxuXHR9XHJcblxyXG5cdGdldF9pbmxpbmtzKHRmaWxlPXRoaXMuY3VycmVudF9ub3RlKXtcclxuXHRcdGxldCByZXMgPSBuZXcgQXJyYXkoKTtcclxuXHJcblx0XHRsZXQgaW5saW5rcyA9IHRoaXMuZHZfYXBpLmluZGV4LmxpbmtzLmludk1hcC5nZXQodGZpbGUucGF0aCk7XHJcblx0XHRpZihpbmxpbmtzPT11bmRlZmluZWQpe1xyXG5cdFx0XHRyZXR1cm4gW107XHJcblx0XHR9ZWxzZXtcclxuXHRcdFx0cmV0dXJuIEFycmF5LmZyb20oaW5saW5rcykubWFwKFxyXG5cdFx0XHRcdChwYXRoKT0+KHRoaXMuYXBwLnZhdWx0LmZpbGVNYXBbcGF0aF0pXHJcblx0XHRcdCkuZmlsdGVyKFxyXG5cdFx0XHRcdChpdGVtKT0+KGl0ZW0pXHJcblx0XHRcdClcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGdldF9vdXRsaW5rcyh0ZmlsZT10aGlzLmN1cnJlbnRfbm90ZSl7XHJcblx0XHRsZXQgcmVzID0gbmV3IEFycmF5KCk7XHJcblx0XHRsZXQgaW5saW5rcyA9IHRoaXMuZHZfYXBpLmluZGV4LmxpbmtzLm1hcC5nZXQodGZpbGUucGF0aCk7XHJcblx0XHRpZihpbmxpbmtzPT11bmRlZmluZWQpe1xyXG5cdFx0XHRyZXR1cm4gW107XHJcblx0XHR9ZWxzZXtcclxuXHRcdFx0cmV0dXJuIEFycmF5LmZyb20oaW5saW5rcykubWFwKFxyXG5cdFx0XHRcdChwYXRoKT0+KHRoaXMuYXBwLnZhdWx0LmZpbGVNYXBbcGF0aF0pXHJcblx0XHRcdCkuZmlsdGVyKFxyXG5cdFx0XHRcdChpdGVtKT0+KGl0ZW0pXHJcblx0XHRcdClcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGdldF9saW5rcyh0ZmlsZT10aGlzLmN1cnJlbnRfbm90ZSl7XHJcblx0XHRsZXQgaW5saW5rcyA9IHRoaXMuZ2V0X2lubGlua3ModGZpbGUpO1xyXG5cdFx0bGV0IG91dGxpbmtzID0gdGhpcy5nZXRfb3V0bGlua3ModGZpbGUpO1xyXG5cdFx0Zm9yKGxldCBsaW5rIG9mIGlubGlua3Mpe1xyXG5cdFx0XHRpZighb3V0bGlua3MuaW5jbHVkZXMobGluaykpe1xyXG5cdFx0XHRcdG91dGxpbmtzLnB1c2gobGluaylcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIG91dGxpbmtzO1xyXG5cdH1cclxuXHJcblx0Z2V0X3NhbWVfcGFyZW50KHRmaWxlPXRoaXMuY3VycmVudF9ub3RlKXtcclxuXHRcdGxldCBub3RlcyA9IHRmaWxlPy5wYXJlbnQ/LmNoaWxkcmVuLmZpbHRlcihcclxuXHRcdGY9PmYuYmFzZW5hbWUpLmZpbHRlcihcclxuXHRcdFx0Zj0+Zi5leHRlbnNpb249PT0nbWQnXHJcblx0XHQpO1xyXG5cdFx0aWYoIW5vdGVzKXtyZXR1cm4gW107fVxyXG5cdFx0cmV0dXJuIG5vdGVzO1xyXG5cdH1cclxuXHJcblx0YXN5bmMgc3VnZ2VzdGVyX25vdGVzKHRmaWxlPXRoaXMuY3VycmVudF9ub3RlKXtcclxuXHRcdGxldCBrdiA9IFtcclxuXHRcdFx0J1x1NUY1M1x1NTI0RFx1N0IxNFx1OEJCMCcsXHJcblx0XHRcdCdcdTU0MENcdTdFQTdcdTc2RUVcdTVGNTUnLFxyXG5cdFx0XHQnXHU1MUZBXHU5NEZFK1x1NTE2NVx1OTRGRScsXHJcblx0XHRcdCdcdTUxNjVcdTk0RkUnLFxyXG5cdFx0XHQnXHU1MUZBXHU5NEZFJyxcclxuXHRcdF1cclxuXHRcdGxldCBtb2RlID0gYXdhaXQgdGhpcy5zdWdnZXN0ZXIoa3Ysa3YpO1xyXG5cdFx0aWYobW9kZT09PSdcdTVGNTNcdTUyNERcdTdCMTRcdThCQjAnKXtcclxuXHRcdFx0cmV0dXJuIFt0ZmlsZV07XHJcblx0XHR9ZWxzZSBpZihtb2RlPT09J1x1NTQwQ1x1N0VBN1x1NzZFRVx1NUY1NScpe1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5nZXRfc2FtZV9wYXJlbnQodGZpbGUpO1xyXG5cdFx0fWVsc2UgaWYobW9kZT09PSdcdTUxRkFcdTk0RkUrXHU1MTY1XHU5NEZFJyl7XHJcblx0XHRcdHJldHVybiB0aGlzLmdldF9saW5rcyh0ZmlsZSk7XHJcblx0XHR9ZWxzZSBpZihtb2RlPT09J1x1NTE2NVx1OTRGRScpe1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5nZXRfaW5saW5rcyh0ZmlsZSk7XHJcblx0XHR9ZWxzZSBpZihtb2RlPT09J1x1NTFGQVx1OTRGRScpe1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5nZXRfb3V0bGlua3ModGZpbGUpO1xyXG5cdFx0fWVsc2V7XHJcblx0XHRcdHJldHVybiBbXTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cclxuXHRnZXRfZmlyc3Rfbm90ZSh0ZmlsZSl7XHJcblx0XHRsZXQgcmVzID0gbmV3IEFycmF5KCk7XHJcblx0XHRyZXMucHVzaCh0ZmlsZSk7XHJcblx0XHRcclxuXHRcdGxldCB0bXAgPSB0ZmlsZTtcclxuXHRcdHdoaWxlKHRydWUpe1xyXG5cdFx0XHRsZXQgcHJldiA9IHRoaXMuZ2V0X3ByZXZfbm90ZXModG1wLHRoaXMucHJldix0aGlzLm5leHQsdHJ1ZSk7XHJcblx0XHRcdGlmKHByZXZbMF0gJiYgIXJlcy5pbmNsdWRlcyhwcmV2WzFdWzBdKSl7XHJcblx0XHRcdFx0cmVzLnVuc2hpZnQocHJldlsxXVswXSk7XHJcblx0XHRcdFx0dG1wID0gcHJldlsxXVswXVxyXG5cdFx0XHR9ZWxzZXtcclxuXHRcdFx0XHRicmVhaztcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHRtcDtcclxuXHR9XHJcblxyXG5cdGdldF9sYXN0X25vdGUodGZpbGUpe1xyXG5cdFx0bGV0IHJlcyA9IG5ldyBBcnJheSgpO1xyXG5cdFx0cmVzLnB1c2godGZpbGUpO1xyXG5cdFx0bGV0IHRtcCA9IHRmaWxlO1xyXG5cdFx0d2hpbGUodHJ1ZSl7XHJcblx0XHRcdGxldCBuZXh0ID0gdGhpcy5nZXRfbmV4dF9ub3Rlcyh0bXAsdGhpcy5wcmV2LHRoaXMubmV4dCx0cnVlKTtcclxuXHRcdFx0aWYobmV4dFswXSAmJiAhcmVzLmluY2x1ZGVzKG5leHRbMV1bMF0pKXtcclxuXHRcdFx0XHRyZXMucHVzaChuZXh0WzFdWzBdKTtcclxuXHRcdFx0XHR0bXAgPSBuZXh0WzFdWzBdO1xyXG5cdFx0XHRcdGNvbnNvbGUubG9nKHRtcCk7XHJcblx0XHRcdH1lbHNle1xyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gdG1wO1xyXG5cdH1cclxuXHJcblx0Z2V0X2ZpbGVfY2hhaW4odGZpbGU9dGhpcy5jdXJyZW50X25vdGUscHJldj0xMCxuZXh0PTEwKXtcclxuXHRcdGxldCByZXMgPSBBcnJheSgpO1xyXG5cdFx0cmVzLnB1c2godGZpbGUpO1xyXG5cdFx0XHJcblx0XHRsZXQgdG1wID0gdGZpbGU7XHJcblx0XHRmb3IobGV0IGk9cHJldjtpIT0wO2ktLSl7XHJcblx0XHRcdGNvbnNvbGUubG9nKGkpO1xyXG5cdFx0XHRsZXQgbWV0YSA9IHRoaXMuYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKHRtcCk7XHJcblx0XHRcdFxyXG5cdFx0XHRpZighbWV0YSl7YnJlYWt9XHJcblx0XHJcblx0XHRcdGxldCBuYW1lID0gbWV0YS5mcm9udG1hdHRlcj8uUHJldk5vdGU7XHJcblx0XHRcdGlmKCFuYW1lKXticmVha31cclxuXHRcclxuXHRcdFx0bGV0IG5vdGUgPSB0aGlzLmdldF90ZmlsZShuYW1lKTtcclxuXHRcdFx0aWYoIW5vdGUpe1xyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHR9ZWxzZSBpZihyZXMuaW5jbHVkZXMobm90ZSkpe1xyXG5cdFx0XHRcdHRoaXMuc2V0X2Zyb250bWF0dGVyKG5vdGUsdGhpcy5uZXh0LFwiXCIpO1xyXG5cdFx0XHRcdHRoaXMuc2V0X2Zyb250bWF0dGVyKHRtcCx0aGlzLnByZXYsXCJcIik7XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdH1lbHNle1xyXG5cdFx0XHRcdHJlcy51bnNoaWZ0KG5vdGUpO1xyXG5cdFx0XHRcdHRtcCA9IG5vdGU7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcclxuXHRcdHRtcCA9IHRmaWxlO1xyXG5cdFx0Zm9yKGxldCBpPW5leHQ7aSE9MDtpLS0pe1xyXG5cdFx0XHRsZXQgbWV0YSA9IHRoaXMuYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKHRtcCk7XHJcblx0XHRcdFxyXG5cdFx0XHRpZighbWV0YSl7YnJlYWt9XHJcblx0XHJcblx0XHRcdGxldCBuYW1lID0gbWV0YS5mcm9udG1hdHRlcj8uTmV4dE5vdGU7XHJcblx0XHRcdGlmKCFuYW1lKXticmVha31cclxuXHRcclxuXHRcdFx0bGV0IG5vdGUgPSB0aGlzLmdldF90ZmlsZShuYW1lKTtcclxuXHRcdFx0aWYoIW5vdGUpe1xyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHR9ZWxzZSBpZihyZXMuaW5jbHVkZXMobm90ZSkpe1xyXG5cdFx0XHRcdHRoaXMuc2V0X2Zyb250bWF0dGVyKG5vdGUsdGhpcy5wcmV2LFwiXCIpO1xyXG5cdFx0XHRcdHRoaXMuc2V0X2Zyb250bWF0dGVyKHRtcCx0aGlzLm5leHQsXCJcIik7XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdH1lbHNle1xyXG5cdFx0XHRcdHJlcy5wdXNoKG5vdGUpO1xyXG5cdFx0XHRcdHRtcCA9IG5vdGU7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGdldF9wcmV2X25vdGVzKHRmaWxlLHByZXY9XCJQcmV2Tm90ZVwiLG5leHQ9XCJOZXh0Tm90ZVwiLG9ubHlGcm9udG1hdHRlcj10cnVlKXtcclxuXHRcdC8vIG9ubHlGcm9udG1hdHRlclx1RkYwQ1x1NTNFQVx1NjQxQ1x1N0QyMiBmcm9udG1hdHRlciBcdTRFMkRcdTc2ODRcdTk0RkVcdTYzQTVcclxuXHRcdGxldCByZXMgPSBuZXcgQXJyYXkoKTtcclxuXHRcdGxldCBub3RlcyA9IHRoaXMuZ2V0X2xpbmtzKHRmaWxlKTtcclxuXHRcdFxyXG5cdFx0bGV0IG1ldGEgPSB0aGlzLmFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZSh0ZmlsZSk7XHJcblx0XHRsZXQgZmxhZyA9IGZhbHNlO1xyXG5cdFx0aWYobWV0YT8uZnJvbnRtYXR0ZXIpe1xyXG5cdFx0XHRsZXQgbmFtZSA9IG1ldGEuZnJvbnRtYXR0ZXJbcHJldl07XHJcblx0XHRcdGlmKG5hbWUpe1xyXG5cdFx0XHRcdGxldCBub3RlID0gdGhpcy5nZXRfdGZpbGUobmFtZSxub3Rlcyk7XHJcblx0XHRcdFx0cmVzLnB1c2gobm90ZSk7XHJcblx0XHRcdFx0ZmxhZyA9IHRydWU7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdGlmKG9ubHlGcm9udG1hdHRlcil7XHJcblx0XHRcdHJldHVybiBbZmxhZyxyZXNdO1xyXG5cdFx0fVxyXG5cdFx0XHJcblx0XHRmb3IobGV0IG5vdGUgb2Ygbm90ZXMpe1xyXG5cdFx0XHRpZihyZXMuaW5jbHVkZXMobm90ZSkpe2NvbnRpbnVlfVxyXG5cdFx0XHRpZighbm90ZSl7Y29udGludWV9XHJcblxyXG5cdFx0XHRsZXQgbWV0YSA9IHRoaXMuYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKG5vdGUpO1xyXG5cdFx0XHRpZihtZXRhPy5mcm9udG1hdHRlcil7XHJcblx0XHRcdFx0bGV0IG5hbWUgPSBtZXRhLmZyb250bWF0dGVyW25leHRdO1xyXG5cdFx0XHRcdGlmKHRoaXMuZ2V0X3RmaWxlKG5hbWUsW3RmaWxlXSkpe1xyXG5cdFx0XHRcdFx0cmVzLnB1c2gobm90ZSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gW2ZsYWcscmVzXTtcclxuXHR9XHJcblxyXG5cdGdldF9uZXh0X25vdGVzKHRmaWxlLHByZXY9XCJQcmV2Tm90ZVwiLG5leHQ9XCJOZXh0Tm90ZVwiLG9ubHlGcm9udG1hdHRlcj10cnVlKXtcclxuXHRcdHJldHVybiB0aGlzLmdldF9wcmV2X25vdGVzKHRmaWxlLG5leHQscHJldixvbmx5RnJvbnRtYXR0ZXIpO1xyXG5cdH1cclxuXHJcblx0Z2V0X25laWdoYm9ycyh0ZmlsZSl7XHJcblx0XHRsZXQgdG1wID0gdGhpcy5nZXRfcHJldl9ub3Rlcyh0ZmlsZSx0aGlzLnByZXYsdGhpcy5uZXh0LHRydWUpO1xyXG5cdFx0bGV0IHBmbGFnID0gdG1wWzBdO1xyXG5cdFx0bGV0IHByZXYgPSB0bXBbMV07XHJcblx0XHRsZXQgdG1wMiA9IHRoaXMuZ2V0X25leHRfbm90ZXModGZpbGUsdGhpcy5wcmV2LHRoaXMubmV4dCx0cnVlKTtcclxuXHRcdGxldCBuZmxhZyA9IHRtcDJbMF07XHJcblx0XHRsZXQgbmV4dCA9IHRtcDJbMV07XHJcblxyXG5cdFx0aWYocGZsYWcgJiYgbmZsYWcpe1xyXG5cdFx0XHRyZXR1cm4gW3ByZXZbMF0sbmV4dFswXV07XHJcblx0XHR9ZWxzZSBpZihwZmxhZyl7XHJcblx0XHRcdHJldHVybiBbcHJldlswXSx1bmRlZmluZWRdO1xyXG5cdFx0fWVsc2UgaWYobmZsYWcpe1xyXG5cdFx0XHRyZXR1cm4gW3VuZGVmaW5lZCxuZXh0WzBdXTtcclxuXHRcdH1lbHNle1xyXG5cdFx0XHRyZXR1cm4gW3VuZGVmaW5lZCx1bmRlZmluZWRdO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRcclxuXHJcblx0YXN5bmMgc2V0X2Zyb250bWF0dGVyKHRmaWxlLGtleSx2YWx1ZSl7XHJcblx0XHRhd2FpdCB0aGlzLmFwcC5maWxlTWFuYWdlci5wcm9jZXNzRnJvbnRNYXR0ZXIodGZpbGUsZm0gPT57XHJcblx0XHRcdGNvbnNvbGUubG9nKGAke3RmaWxlLmJhc2VuYW1lfS0tLSR7a2V5fS0tLSR7dmFsdWV9YCk7XHJcblx0XHRcdGZtW2tleV0gPSB2YWx1ZTtcclxuXHRcdH0pO1xyXG5cdH1cclxuXHJcblx0Z2V0X2Zyb250bWF0dGVyKHRmaWxlLGtleSl7XHJcblx0XHRsZXQgbWV0YSA9IHRoaXMuYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKHRmaWxlKTtcclxuXHRcdGlmKG1ldGE/LmZyb250bWF0dGVyKXtcclxuXHRcdFx0cmV0dXJuIG1ldGEuZnJvbnRtYXR0ZXJba2V5XTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHBvcF9ub2RlKHRmaWxlKXtcclxuXHRcdC8vIFx1NzlGQlx1OTY2NCB0ZmlsZVx1RkYwQ1x1NTE3M1x1ODA1NFx1NTI0RFx1NTQwRVxyXG5cdFx0bGV0IG5laWdoYm9yID0gdGhpcy5nZXRfbmVpZ2hib3JzKHRmaWxlKTtcclxuXHRcdGlmKG5laWdoYm9yWzBdIT1udWxsICYmIG5laWdoYm9yWzFdIT1udWxsKXtcclxuXHRcdFx0dGhpcy5zZXRfZnJvbnRtYXR0ZXIobmVpZ2hib3JbMF0sdGhpcy5uZXh0LGBbWyR7bmVpZ2hib3JbMV0uYmFzZW5hbWV9XV1gKTtcclxuXHRcdFx0dGhpcy5zZXRfZnJvbnRtYXR0ZXIobmVpZ2hib3JbMV0sdGhpcy5wcmV2LGBbWyR7bmVpZ2hib3JbMF0uYmFzZW5hbWV9XV1gKTtcclxuXHRcdH1lbHNlIGlmKG5laWdoYm9yWzBdIT1udWxsKXtcclxuXHRcdFx0dGhpcy5zZXRfZnJvbnRtYXR0ZXIobmVpZ2hib3JbMF0sdGhpcy5uZXh0LGBgKTtcclxuXHRcdH1lbHNlIGlmKG5laWdoYm9yWzFdIT1udWxsKXtcclxuXHRcdFx0dGhpcy5zZXRfZnJvbnRtYXR0ZXIobmVpZ2hib3JbMV0sdGhpcy5wcmV2LGBgKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGluc2VydF9ub2RlX2FzX2hlYWQodGZpbGUsYW5jaG9yKXtcclxuXHRcdC8vIFx1NUMwNnRmaWxlIFx1NjNEMlx1NTIzMCBhbmNob3IgXHU2MjQwXHU1NzI4XHU5NEZFXHU3Njg0XHU1OTM0XHJcblx0XHRpZihoZWFkPT10ZmlsZSl7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHRcdGxldCBoZWFkID0gdGhpcy5nZXRfZmlyc3Rfbm90ZShhbmNob3IpO1xyXG5cdFx0dGhpcy5zZXRfZnJvbnRtYXR0ZXIodGZpbGUsdGhpcy5uZXh0LGBbWyR7aGVhZC5iYXNlbmFtZX1dXWApO1xyXG5cdFx0dGhpcy5zZXRfZnJvbnRtYXR0ZXIoaGVhZCx0aGlzLnByZXYsYFtbJHt0ZmlsZS5iYXNlbmFtZX1dXWApO1xyXG5cdH1cclxuXHJcblx0aW5zZXJ0X25vZGVfYXNfdGFpbCh0ZmlsZSxhbmNob3Ipe1xyXG5cdFx0Ly8gXHU1QzA2dGZpbGUgXHU2M0QyXHU1MjMwIGFuY2hvciBcdTYyNDBcdTU3MjhcdTk0RkVcdTc2ODRcdTVDM0VcclxuXHRcdGxldCB0YWlsID0gdGhpcy5nZXRfbGFzdF9ub3RlKGFuY2hvcik7XHJcblx0XHRpZih0ZmlsZT09dGFpbCl7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHRcdHRoaXMuc2V0X2Zyb250bWF0dGVyKHRmaWxlLHRoaXMucHJldixgW1ske3RhaWwuYmFzZW5hbWV9XV1gKTtcclxuXHRcdHRoaXMuc2V0X2Zyb250bWF0dGVyKHRhaWwsdGhpcy5uZXh0LGBbWyR7dGZpbGUuYmFzZW5hbWV9XV1gKTtcclxuXHR9XHJcblxyXG5cdGluc2VydF9ub2RlX2FmdGVyKHRmaWxlLGFuY2hvcil7XHJcblx0XHRsZXQgbmV4dCA9IHRoaXMuZ2V0X25leHRfbm90ZXMoYW5jaG9yLHRoaXMucHJldix0aGlzLm5leHQsdHJ1ZSk7XHJcblx0XHRpZihuZXh0WzBdICYmIG5leHRbMV1bMF0hPXRmaWxlICYmIG5leHRbMV1bMF0hPWFuY2hvcil7XHJcblx0XHRcdHRoaXMuc2V0X2Zyb250bWF0dGVyKG5leHRbMV1bMF0sdGhpcy5wcmV2LGBbWyR7dGZpbGUuYmFzZW5hbWV9XV1gKTtcclxuXHRcdFx0dGhpcy5zZXRfZnJvbnRtYXR0ZXIodGZpbGUsdGhpcy5uZXh0LGBbWyR7bmV4dFsxXVswXS5iYXNlbmFtZX1dXWApO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuc2V0X2Zyb250bWF0dGVyKHRmaWxlLHRoaXMucHJldixgW1ske2FuY2hvci5iYXNlbmFtZX1dXWApO1xyXG5cdFx0dGhpcy5zZXRfZnJvbnRtYXR0ZXIoYW5jaG9yLHRoaXMubmV4dCxgW1ske3RmaWxlLmJhc2VuYW1lfV1dYCk7XHJcblx0fVxyXG5cclxuXHRpbnNlcnRfbm9kZV9iZWZvcmUodGZpbGUsYW5jaG9yKXtcclxuXHRcdGxldCBwcmV2ID0gdGhpcy5nZXRfcHJldl9ub3RlcyhhbmNob3IsdGhpcy5wcmV2LHRoaXMubmV4dCx0cnVlKTtcclxuXHRcdGlmKHByZXZbMF0gJiYgcHJldlsxXVswXSE9dGZpbGUgJiYgcHJldlsxXVswXSE9YW5jaG9yKXtcclxuXHRcdFx0dGhpcy5zZXRfZnJvbnRtYXR0ZXIocHJldlsxXVswXSx0aGlzLm5leHQsYFtbJHt0ZmlsZS5iYXNlbmFtZX1dXWApO1xyXG5cdFx0XHR0aGlzLnNldF9mcm9udG1hdHRlcih0ZmlsZSx0aGlzLnByZXYsYFtbJHtwcmV2WzFdWzBdLmJhc2VuYW1lfV1dYCk7XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5zZXRfZnJvbnRtYXR0ZXIodGZpbGUsdGhpcy5uZXh0LGBbWyR7YW5jaG9yLmJhc2VuYW1lfV1dYCk7XHJcblx0XHR0aGlzLnNldF9mcm9udG1hdHRlcihhbmNob3IsdGhpcy5wcmV2LGBbWyR7dGZpbGUuYmFzZW5hbWV9XV1gKTtcclxuXHR9XHJcblx0XHJcblx0YXN5bmMgcmVjaGFpbl9mb2xkZXIodGZvbGRlcj1udWxsLG1vZGU9J3N1Z2dlc3Rlcicpe1xyXG5cdFx0bGV0IG5vdGVzID0gdGhpcy5nZXRfc2FtZV9wYXJlbnQoKTtcclxuXHRcdGxldCBmaWxlcyA9IGF3YWl0IHRoaXMuc3VnZ2VzdGVyX3NvcnQobm90ZXMpO1xyXG5cdFx0XHJcblx0XHRmb3IobGV0IGk9MDtpPGZpbGVzLmxlbmd0aC0xO2krKyl7XHJcblx0XHRcdGlmKCEodGhpcy5nZXRfZnJvbnRtYXR0ZXIoZmlsZXNbaV0sdGhpcy5uZXh0KT09PWBbWyR7ZmlsZXNbaSsxXS5iYXNlbmFtZX1dXWApKXtcclxuXHRcdFx0XHR0aGlzLnNldF9mcm9udG1hdHRlcihmaWxlc1tpXSx0aGlzLm5leHQsYFtbJHtmaWxlc1tpKzFdLmJhc2VuYW1lfV1dYCk7XHJcblx0XHRcdH1cclxuXHRcdFx0aWYoISh0aGlzLmdldF9mcm9udG1hdHRlcihmaWxlc1tpKzFdLHRoaXMucHJldik9PT1gW1ske2ZpbGVzW2ldLmJhc2VuYW1lfV1dYCkpe1xyXG5cdFx0XHRcdHRoaXMuc2V0X2Zyb250bWF0dGVyKGZpbGVzW2krMV0sdGhpcy5wcmV2LGBbWyR7ZmlsZXNbaV0uYmFzZW5hbWV9XV1gKTtcdFxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRzb3J0X3RmaWxlcyhmaWxlcyxmaWVsZCl7XHJcblx0XHRpZih0eXBlb2YgZmllbGQgPT09ICdzdHJpbmcnKXtcclxuXHRcdFx0aWYoZmllbGQubG9jYWxlQ29tcGFyZShcIm5hbWVcIik9PTApe1xyXG5cdFx0XHRcdHJldHVybiBmaWxlcy5zb3J0KFxyXG5cdFx0XHRcdFx0KGEsYik9PihhLm5hbWUubG9jYWxlQ29tcGFyZShiLm5hbWUpKVxyXG5cdFx0XHRcdCk7XHJcblx0XHRcdH1lbHNlIGlmKGZpZWxkLmxvY2FsZUNvbXBhcmUoXCJtdGltZVwiKT09MCl7XHJcblx0XHRcdFx0cmV0dXJuIGZpbGVzLnNvcnQoXHJcblx0XHRcdFx0XHQoYSxiKT0+KGEuc3RhdC5tdGltZS1iLnN0YXQubXRpbWUpXHJcblx0XHRcdFx0KVxyXG5cdFx0XHR9ZWxzZSBpZihmaWVsZC5sb2NhbGVDb21wYXJlKFwiY3RpbWVcIik9PTApe1xyXG5cdFx0XHRcdHJldHVybiBmaWxlcy5zb3J0KFxyXG5cdFx0XHRcdFx0KGEsYik9PihhLnN0YXQuY3RpbWUtYi5zdGF0LmN0aW1lKVxyXG5cdFx0XHRcdClcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gZmlsZXM7XHJcblx0XHR9ZWxzZSBpZih0eXBlb2YgZmllbGQgPT09ICdvYmplY3QnKXtcclxuXHRcdFx0aWYoZmllbGQgaW5zdGFuY2VvZiBBcnJheSl7XHJcblx0XHRcdFx0bGV0IG5maWxlcyA9IHRoaXMuc29ydF90ZmlsZXMoZmlsZXMsZmllbGRbMF0pO1xyXG5cdFx0XHRcdGlmKGZpZWxkLmxlbmd0aD49Mil7XHJcblx0XHRcdFx0XHRpZihmaWVsZFsxXT09PSd4Jyl7XHJcblx0XHRcdFx0XHRcdHJldHVybiBuZmlsZXMucmV2ZXJzZSgpXHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiBuZmlsZXM7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdHJldHVybiBmaWxlcztcclxuXHR9XHJcblx0c29ydF90ZmlsZXNfYnlfY2hhaW4oZmlsZXMpe1xyXG5cclxuXHR9XHJcblx0c29ydF90ZmlsZXNfYnlfZmllbGQoZmlsZXMsZmllbGQpe1xyXG5cdFx0bGV0IHJlcyA9IGZpbGVzLnNvcnQoXHJcblx0XHRcdChhLGIpPT57XHJcblx0XHRcdFx0bGV0IGFtZXRhID0gdGhpcy5hcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoYSkuZnJvbnRtYXR0ZXI7XHJcblx0XHRcdFx0bGV0IGJtZXRhID0gdGhpcy5hcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoYikuZnJvbnRtYXR0ZXI7XHJcblx0XHRcdFx0aWYoIWFtZXRhICYmICFibWV0YSl7XHJcblx0XHRcdFx0XHRyZXR1cm4gMDtcclxuXHRcdFx0XHR9ZWxzZSBpZighYW1ldGEpe1xyXG5cdFx0XHRcdFx0cmV0dXJuIGJtZXRhW2ZpZWxkXTtcclxuXHRcdFx0XHR9ZWxzZSBpZighYm1ldGEpe1xyXG5cdFx0XHRcdFx0cmV0dXJuIGFtZXRhW21vZGVdO1xyXG5cdFx0XHRcdH1lbHNle1xyXG5cdFx0XHRcdFx0cmV0dXJuIGFtZXRhW2ZpZWxkXS1ibWV0YVtmaWVsZF07XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHQpXHJcblx0XHRyZXR1cm4gcmVzO1xyXG5cdH1cclxuXHJcblx0YXN5bmMgc3VnZ2VzdGVyX3NvcnQodGZpbGVzKXtcclxuXHRcdGlmKCF0ZmlsZXMpe3JldHVybiBbXTt9XHJcblx0XHRpZih0ZmlsZXMubGVuZ3RoPT0wKXtyZXR1cm4gW119O1xyXG5cdFx0bGV0IGt2ID0ge1xyXG5cdFx0XHQnbmFtZSc6J25hbWUnLFxyXG5cdFx0XHQnY3RpbWUnOidjdGltZScsXHJcblx0XHRcdCdtdGltZSc6J210aW1lJyxcclxuXHRcdFx0J25hbWUgXHU1MDEyXHU1RThGJzpbJ25hbWUnLCd4J10sXHJcblx0XHRcdCdjdGltZSBcdTUwMTJcdTVFOEYnOlsnY3RpbWUnLCd4J10sXHJcblx0XHRcdCdtdGltZSBcdTUwMTJcdTVFOEYnOlsnbXRpbWUnLCd4J10sXHJcblx0XHR9XHJcblx0XHRsZXQgZmllbGQgPSBhd2FpdCB0aGlzLnN1Z2dlc3RlcihcclxuXHRcdFx0T2JqZWN0LmtleXMoa3YpLFxyXG5cdFx0XHRPYmplY3QudmFsdWVzKGt2KVxyXG5cdFx0KTtcclxuXHRcdHJldHVybiB0aGlzLnNvcnRfdGZpbGVzKHRmaWxlcyxmaWVsZCk7XHJcblx0fVxyXG5cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgWmlnSG9sZGluZyBleHRlbmRzIFBsdWdpbiB7XHJcblx0c2V0dGluZ3M6IFppZ1NldHRpbmdzO1xyXG5cdGNoYWluIDogTm90ZUNoYWluO1xyXG5cdGVkaXRvciA6IFppZ0VkaXRvcjsgXHJcblxyXG5cdGFzeW5jIG9ubG9hZCgpIHtcclxuXHJcblx0XHR0aGlzLmNoYWluID0gbmV3IE5vdGVDaGFpbih0aGlzKTtcclxuXHJcblx0XHR0aGlzLmVkaXRvciA9IG5ldyBaaWdFZGl0b3IodGhpcy5hcHApO1xyXG5cdFx0dGhpcy5hcHAuemlnID0gdGhpcztcclxuXHJcblxyXG5cdFx0YXdhaXQgdGhpcy5sb2FkU2V0dGluZ3MoKTtcclxuXHRcdFxyXG5cdFx0dGhpcy5kYXRhdmlldyA9IGF3YWl0IHRoaXMuYXBwLnBsdWdpbnMuZ2V0UGx1Z2luKFxyXG5cdFx0XHRcImRhdGF2aWV3XCJcclxuXHRcdCk7XHJcblxyXG5cdFx0dGhpcy50ZW1wbGF0ZXIgPSBhd2FpdCB0aGlzLmFwcC5wbHVnaW5zLmdldFBsdWdpbihcclxuXHRcdFx0XCJ0ZW1wbGF0ZXItb2JzaWRpYW5cIlxyXG5cdFx0KVxyXG5cclxuXHRcdHRoaXMuYWRkQ29tbWFuZCh7XHJcblx0XHRcdGlkOiAnY2hhaW5faW5zZXJ0X25vZGUnLFxyXG5cdFx0XHRuYW1lOiAnQ2hhaW4tLT5cdTYzRDJcdTUxNjVcdTgyODJcdTcwQjknLFxyXG5cdFx0XHRjYWxsYmFjazogKCkgPT4ge1xyXG5cdFx0XHRcdHRoaXMuY2hhaW5faW5zZXJ0X25vZGUoKTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHRcclxuXHRcdHRoaXMuYWRkQ29tbWFuZCh7XHJcblx0XHRcdGlkOiAnY2hhaW5fc2V0X3NlcV9ub3RlJyxcclxuXHRcdFx0bmFtZTogJ0NoaWFuLS0+XHU5MUNEXHU3RjZFXHU1RjUzXHU1MjREXHU3QjE0XHU4QkIwXHU2MjQwXHU1NzI4XHU3NkVFXHU1RjU1XHU5NEZFXHU2NzYxXHVGRjBDXHU0RjFBXHU2RTA1XHU5NjY0XHU0RjYwXHU3Njg0XHU4QkJFXHU3RjZFXHVGRjBDXHU2MTRFXHU3NTI4XHVGRjAxJyxcclxuXHRcdFx0Y2FsbGJhY2s6ICgpID0+IHtcclxuXHRcdFx0XHR0aGlzLmNoYWluLnJlY2hhaW5fZm9sZGVyKCk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cclxuXHRcdHRoaXMuYWRkQ29tbWFuZCh7XHJcblx0XHRcdGlkOiAnb3Blbl9ub3Rlc19pbl9zYW1lX2ZvbGRlcicsXHJcblx0XHRcdG5hbWU6ICdPcGVuLS0+XHU2MjUzXHU1RjAwXHU3NkVFXHU1RjU1XHU3QjE0XHU4QkIwJyxcclxuXHRcdFx0Y2FsbGJhY2s6ICgpID0+IHtcclxuXHRcdFx0XHR0aGlzLm9wZW5fbm90ZXNfaW5fc2FtZV9mb2xkZXIoKTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblxyXG5cdFx0dGhpcy5hZGRDb21tYW5kKHtcclxuXHRcdFx0aWQ6ICdvcGVuX25vdGVfY2hhaW4nLFxyXG5cdFx0XHRuYW1lOiAnQ2hhaW4tLT5cdTYyNTNcdTVGMDBcdTdCMTRcdThCQjBcdTk0RkVcdTY3NjEnLFxyXG5cdFx0XHRjYWxsYmFjazogKCkgPT4ge1xyXG5cdFx0XHRcdHRoaXMub3Blbl9ub3RlX2NoYWluKCk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cclxuXHRcdHRoaXMuYWRkQ29tbWFuZCh7XHJcblx0XHRcdGlkOiAnY2xlYXJfaW5saW5rcycsXHJcblx0XHRcdG5hbWU6ICdcdTY1NzRcdTc0MDYtLT5cdTZFMDVcdTc0MDZcdTUxNjVcdTk0RkUnLFxyXG5cdFx0XHRjYWxsYmFjazogKCkgPT4ge1xyXG5cdFx0XHRcdHRoaXMuY2xlYXJfaW5saW5rcygpO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHJcblx0XHR0aGlzLmFkZENvbW1hbmQoe1xyXG5cdFx0XHRpZDogJ21vdmVfZmlsZV90b19hbm90aGVyX2ZvbGRlcicsXHJcblx0XHRcdG5hbWU6ICdcdTY1NzRcdTc0MDYtLT5cdTc5RkJcdTUyQThcdTUyMzBcdTUxNzZcdTVCODNcdTY1ODdcdTRFRjZcdTU5MzknLFxyXG5cdFx0XHRjYWxsYmFjazogKCkgPT4ge1xyXG5cdFx0XHRcdHRoaXMuY2hhaW4ubW92ZV9maWxlX3RvX2Fub3RoZXJfZm9sZGVyKCk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0XHJcblx0XHR0aGlzLmFkZENvbW1hbmQoe1xyXG5cdFx0XHRpZDogJ3JlcGxhY2Vfbm90ZXNfd2l0aF9yZWd4JyxcclxuXHRcdFx0bmFtZTogJ1x1NjU3NFx1NzQwNi0tPlx1NkI2M1x1NTIxOVx1ODg2OFx1OEZCRVx1NUYwRlx1NjI3OVx1OTFDRlx1NjZGRlx1NjM2MicsXHJcblx0XHRcdGNhbGxiYWNrOiAoKSA9PiB7XHJcblx0XHRcdFx0dGhpcy5yZXBsYWNlX25vdGVzX3dpdGhfcmVneCgpO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHJcblx0XHQvLyBUaGlzIGFkZHMgYSBzZXR0aW5ncyB0YWIgc28gdGhlIHVzZXIgY2FuIGNvbmZpZ3VyZSB2YXJpb3VzIGFzcGVjdHMgb2YgdGhlIHBsdWdpblxyXG5cdFx0dGhpcy5hZGRTZXR0aW5nVGFiKG5ldyBaaWdTZXR0aW5nVGFiKHRoaXMuYXBwLCB0aGlzKSk7XHJcblxyXG5cdFx0Y29uc29sZS5sb2coJ1ppZy1Ib2xkaW5nOnJlZ2Vpc3RlciB1ZnVuY19vbl9maWxlX29wZW4nKTtcclxuXHRcdHRoaXMuYXBwLndvcmtzcGFjZS5vbignZmlsZS1vcGVuJywgdGhpcy51ZnVuY19vbl9maWxlX29wZW4pO1xyXG5cdH1cclxuXHJcblx0b251bmxvYWQoKSB7XHJcblx0XHRjb25zb2xlLmxvZygnWmlnLUhvbGRpbmc6dW5yZWdlaXN0ZXIgdWZ1bmNfb25fZmlsZV9vcGVuJyk7XHJcblx0XHR0aGlzLmFwcC53b3Jrc3BhY2Uub2ZmKCdmaWxlLW9wZW4nLCB0aGlzLnVmdW5jX29uX2ZpbGVfb3Blbik7XHJcblx0fVxyXG5cclxuXHRhc3luYyB1ZnVuY19vbl9maWxlX29wZW4oZmlsZSl7XHJcblx0XHRsZXQgemggPSBhd2FpdCBhcHAucGx1Z2lucy5nZXRQbHVnaW4oXCJ6aWctaG9sZGluZ1wiKTtcclxuXHRcdGlmKCF6aCl7cmV0dXJuO31cclxuXHRcdGlmKHpoLnNldHRpbmdzLnJlZnJlc2hEYXRhVmlldyl7XHJcblx0XHRcdHpoLmFwcC5jb21tYW5kcy5leGVjdXRlQ29tbWFuZEJ5SWQoXHJcblx0XHRcdFx0XCJkYXRhdmlldzpkYXRhdmlldy1mb3JjZS1yZWZyZXNoLXZpZXdzXCJcclxuXHRcdFx0KVxyXG5cdFx0fVxyXG5cdFx0aWYoemguc2V0dGluZ3MucmVmcmVzaFRhc2tzKXtcclxuXHRcdFx0bGV0IHRhcmdldCA9IGF3YWl0IGFwcC5wbHVnaW5zLmdldFBsdWdpbihcIm9ic2lkaWFuLXRhc2tzLXBsdWdpblwiKTtcclxuXHRcdFx0dGFyZ2V0LmNhY2hlLm5vdGlmeVN1YnNjcmliZXJzKCk7XHJcblx0XHR9XHJcblx0fVxyXG5cdFxyXG5cdGFzeW5jIGxvYWRTZXR0aW5ncygpIHtcclxuXHRcdHRoaXMuc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX1NFVFRJTkdTLCBhd2FpdCB0aGlzLmxvYWREYXRhKCkpO1xyXG5cdH1cclxuXHJcblx0YXN5bmMgc2F2ZVNldHRpbmdzKCkge1xyXG5cdFx0YXdhaXQgdGhpcy5zYXZlRGF0YSh0aGlzLnNldHRpbmdzKTtcclxuXHR9XHJcblxyXG5cdGFzeW5jIGNsZWFyX2lubGlua3ModGZpbGU9dGhpcy5jaGFpbi5jdXJyZW50X25vdGUsbW9kZT0nc3VnZ2VzdGVyJyl7XHJcblx0XHRsZXQgbm90ZXMgPSB0aGlzLmNoYWluLmdldF9pbmxpbmtzKHRmaWxlKTtcclxuXHRcdGlmKG5vdGVzLmxlbmd0aCl7XHJcblx0XHRcdGlmKG1vZGU9PT0nc3VnZ2VzdGVyJyl7XHJcblx0XHRcdFx0bW9kZSA9IGF3YWl0IHRoaXMuc3VnZ2VzdGVyKFxyXG5cdFx0XHRcdFx0W1wiXHU1MjIwXHU5NjY0XHU5NEZFXHU2M0E1XCIsJ1x1NjZGRlx1NjM2Mlx1OTRGRVx1NjNBNScsXCJcdTUyMjBcdTk2NjRcdTZCQjVcdTg0M0RcIixdLFxyXG5cdFx0XHRcdFx0W1snbGluaycsJ2RlbCddLFsnbGluaycsJ3JlcCddLFsncGFyYScsJ3JlcCddXVxyXG5cdFx0XHRcdCk7XHJcblx0XHRcdH1cclxuXHRcdFx0bGV0IHJlZyA9IHRoaXMuZWRpdG9yLnJlZ2V4cF9saW5rKHRmaWxlLG1vZGVbMF0pO1xyXG5cdFx0XHRpZihyZWcpe1xyXG5cdFx0XHRcdGZvcihsZXQgbm90ZSBvZiBub3Rlcyl7XHJcblx0XHRcdFx0XHRsZXQgdGFyZ2V0O1xyXG5cdFx0XHRcdFx0aWYobW9kZVsxXT09PSdyZXAnKXtcclxuXHRcdFx0XHRcdFx0dGFyZ2V0PXRmaWxlLmJhc2VuYW1lO1xyXG5cdFx0XHRcdFx0fWVsc2V7XHJcblx0XHRcdFx0XHRcdHRhcmdldD0nJ1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0dGhpcy5lZGl0b3IucmVwbGFjZShub3RlLHJlZyx0YXJnZXQpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0YXN5bmMgcmVwbGFjZV9ub3Rlc193aXRoX3JlZ3goKXtcclxuXHRcdGxldCBub3RlcyA9IGF3YWl0IHRoaXMuY2hhaW4uc3VnZ2VzdGVyX25vdGVzKCk7XHJcblx0XHRpZihub3Rlcz8ubGVuZ3RoPjApe1xyXG5cdFx0XHRsZXQgcHJvbXB0ID0gZ2V0X3RwX2Z1bmModGhpcy5hcHAsJ3RwLnN5c3RlbS5wcm9tcHQnKTtcclxuXHRcdFx0bGV0IHJlZ3MgPSBhd2FpdCBwcm9tcHQoJ1x1ODk4MVx1NjZGRlx1NjM2Mlx1NzY4NFx1NkI2M1x1NTIxOVx1ODg2OFx1OEZCRVx1NUYwRicpO1xyXG5cdFx0XHRsZXQgcmVnID0gbmV3IFJlZ0V4cChyZWdzLCdnJyk7XHJcblx0XHRcdGNvbnNvbGUubG9nKHJlZ3MscmVnKTtcclxuXHRcdFx0bGV0IHRhcmdldCA9IGF3YWl0IHByb21wdCgnXHU3NkVFXHU2ODA3XHU1QjU3XHU3QjI2XHU0RTMyJyk7XHJcblx0XHRcdGZvcihsZXQgbm90ZSBvZiBub3Rlcyl7XHJcblx0XHRcdFx0dGhpcy5lZGl0b3IucmVwbGFjZShub3RlLHJlZyx0YXJnZXQpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHJcblx0Z2V0X3RmaWxlKHBhdGg6c3RyaW5nKXtcclxuXHRcdC8vIFx1NjgzOVx1NjM2RVx1OERFRlx1NUY4NFx1ODNCN1x1NTNENiB0ZmlsZVx1RkYwQ1x1NTkyN1x1NUMwRlx1NEUwRFx1NjU0Rlx1NjExRlxyXG5cdFx0bGV0IGZpbGVzID0gYXBwLnZhdWx0LmdldE1hcmtkb3duRmlsZXMoKTtcclxuXHRcdGlmKGZpbGVzLmluY2x1ZGVzKHBhdGgpKXtcclxuXHRcdFx0cmV0dXJuIGZpbGVzW3BhdGhdXHJcblx0XHR9XHJcblx0XHRmb3IobGV0IGZpbGUgb2YgZmlsZXMpe1xyXG5cdFx0XHRpZihmaWxlLm5hbWUudG9Mb3dlckNhc2UoKS5sb2NhbGVDb21wYXJlKHBhdGgudG9Mb3dlckNhc2UoKSk9PTApe1xyXG5cdFx0XHRcdHJldHVybiBmaWxlO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmKGZpbGUuYmFzZW5hbWUudG9Mb3dlckNhc2UoKS5sb2NhbGVDb21wYXJlKHBhdGgudG9Mb3dlckNhc2UoKSk9PTApe1xyXG5cdFx0XHRcdHJldHVybiBmaWxlO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmKGBbWyR7ZmlsZS5iYXNlbmFtZS50b0xvd2VyQ2FzZSgpfV1dYC5sb2NhbGVDb21wYXJlKHBhdGgudG9Mb3dlckNhc2UoKSk9PTApe1xyXG5cdFx0XHRcdHJldHVybiBmaWxlO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gbnVsbDtcclxuXHR9XHJcblxyXG5cdGdldF90ZmlsZV9jb25maWcodGZpbGUsc3VmZml4PVwiX2NvbmZpZ1wiKXtcclxuXHRcdC8vIFx1ODNCN1x1NTNENiB0ZmlsZSBcdTVCRjlcdTVFOTRcdTc2ODQgY29uZmlnIFx1NjU4N1x1NEVGNlxyXG5cdFx0cmV0dXJuIHRoaXMuZ2V0X3RmaWxlKHRmaWxlLmJhc2VuYW1lK3N1ZmZpeCk7XHJcblx0fVxyXG5cclxuXHRhc3luYyBzZWxlY3RfdmFsdWVfb2ZfbGlzdCh0YXJnZXRzLHByb21wdD1udWxsKXtcclxuXHRcdGNvbnN0IHRhcmdldCA9IGF3YWl0IHRoaXMuc3VnZ2VzdGVyKFxyXG5cdFx0XHR0YXJnZXRzLHRhcmdldHMsZmFsc2UscHJvbXB0XHJcblx0XHQpOyBcclxuXHRcdHJldHVybiB0YXJnZXQ7XHJcblx0fVxyXG5cclxuXHRhc3luYyBjaGFpbl9pbnNlcnRfbm9kZSgpe1xyXG5cdFx0Ly8gXHU5MDA5XHU2MkU5XHU3QjE0XHU4QkIwXHU3Njg0XHU1NDBFXHU3RjZFXHU3QjE0XHU4QkIwXHJcblx0XHRsZXQgY3VyciA9IGFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlRmlsZSgpO1xyXG5cclxuXHRcdGxldCBmaWx0ZXJlZEZpbGVzID0gYXBwLnZhdWx0LmdldE1hcmtkb3duRmlsZXMoKS5zb3J0KFxyXG5cdFx0XHQoYSxiKT0+KGIuc3RhdC5tdGltZS1hLnN0YXQubXRpbWUpXHJcblx0XHQpO1xyXG5cclxuXHRcdGlmKCF0aGlzLnNldHRpbmdzLmFsbEZpbGVzKXtcclxuXHRcdFx0ZmlsdGVyZWRGaWxlcyA9IGZpbHRlcmVkRmlsZXMuZmlsdGVyKFxyXG5cdFx0XHRcdChmaWxlKT0+ZmlsZSE9Y3VyciAmJiBmaWxlLnBhcmVudD09Y3Vyci5wYXJlbnRcclxuXHRcdFx0KTtcclxuXHRcdH1lbHNle1xyXG5cdFx0XHRmaWx0ZXJlZEZpbGVzID0gZmlsdGVyZWRGaWxlcy5maWx0ZXIoXHJcblx0XHRcdFx0KGZpbGUpPT5maWxlIT1jdXJyXHJcblx0XHRcdCk7XHJcblx0XHR9XHJcblx0XHRjb25zdCBub3RlID0gYXdhaXQgdGhpcy5zdWdnZXN0ZXIoXHJcblx0XHRcdChmaWxlKSA9PiB0aGlzLnRmaWxlX3RvX3N0cmluZyhcclxuXHRcdFx0XHRcdGZpbGUsXHJcblx0XHRcdFx0XHR0aGlzLnNldHRpbmdzLnNob3dMaW5rID8gW1wiUHJldk5vdGVcIixcIk5leHROb3RlXCJdIDpbXSxcclxuXHRcdFx0XHRcdFwiXFx0XFx0XFx0XHUyNkExICBcIlxyXG5cdFx0XHRcdCksIFxyXG5cdFx0XHRmaWx0ZXJlZEZpbGVzXHJcblx0XHQpOyBcclxuXHRcdFxyXG5cdFx0aWYoIW5vdGUpe3JldHVybjt9XHJcblxyXG5cdFx0bGV0IG1vZGUgPSBhd2FpdCB0aGlzLnNlbGVjdF92YWx1ZV9vZl9saXN0KFtcclxuXHRcdFx0XCJpbnNlcnRfbm9kZV9hZnRlclwiLFxyXG5cdFx0XHRcImluc2VydF9ub2RlX2JlZm9yZVwiLFxyXG5cdFx0XHRcImluc2VydF9ub2RlX2FzX2hlYWRcIixcclxuXHRcdFx0XCJpbnNlcnRfbm9kZV9hc190YWlsXCIsXHJcblx0XHRdLHByb21wdD1cIlNlbGVjdCBOb2RlIEluc2VydCBNb2RlLlwiKTtcclxuXHRcdFxyXG5cdFx0aWYoIW1vZGUpe3JldHVybjt9XHJcblxyXG5cdFx0Y29uc29sZS5sb2codHlwZW9mKG1vZGUpLG1vZGUpO1xyXG5cdFx0aWYodGhpcy5zZXR0aW5ncy5wb3BGaXJzdCl7XHJcblx0XHRcdHRoaXMuY2hhaW4ucG9wX25vZGUoY3Vycik7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYobW9kZT09PSdpbnNlcnRfbm9kZV9hc19oZWFkJyl7XHJcblx0XHRcdHRoaXMuY2hhaW4uaW5zZXJ0X25vZGVfYXNfaGVhZChjdXJyLG5vdGUpO1xyXG5cdFx0fWVsc2UgaWYobW9kZT09PSdpbnNlcnRfbm9kZV9hc190YWlsJyl7XHJcblx0XHRcdHRoaXMuY2hhaW4uaW5zZXJ0X25vZGVfYXNfdGFpbChjdXJyLG5vdGUpO1xyXG5cdFx0fWVsc2UgaWYobW9kZT09PSdpbnNlcnRfbm9kZV9iZWZvcmUnKXtcclxuXHRcdFx0dGhpcy5jaGFpbi5pbnNlcnRfbm9kZV9iZWZvcmUoY3Vycixub3RlKTtcclxuXHRcdH1lbHNlIGlmKG1vZGU9PT0naW5zZXJ0X25vZGVfYWZ0ZXInKXtcclxuXHRcdFx0dGhpcy5jaGFpbi5pbnNlcnRfbm9kZV9hZnRlcihjdXJyLG5vdGUpO1xyXG5cdFx0fWVsc2V7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHRpZih0aGlzLnNldHRpbmdzLm9wZW5MaW5rKXtcclxuXHRcdFx0aWYobm90ZSl7XHJcblx0XHRcdFx0aWYodGhpcy5zZXR0aW5ncy5uZXdUYWIpe1xyXG5cdFx0XHRcdFx0dGhpcy5hcHAud29ya3NwYWNlLmdldExlYWYodHJ1ZSkub3BlbkZpbGUobm90ZSk7XHJcblx0XHRcdFx0fWVsc2V7XHJcblx0XHRcdFx0XHR0aGlzLmFwcC53b3Jrc3BhY2UuYWN0aXZlTGVhZi5vcGVuRmlsZShub3RlKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdCB9XHJcblx0XHQgfVxyXG5cdH1cclxuXHRcclxuXHR0ZmlsZV90b19zdHJpbmcodGZpbGUsZmllbGRzLHNlcSl7XHJcblx0XHRsZXQgbWV0YSA9IHRoaXMuYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKHRmaWxlKTtcclxuXHRcdGxldCBpdGVtcyA9IG5ldyBBcnJheSgpO1xyXG5cdFx0aXRlbXMucHVzaCh0ZmlsZS5iYXNlbmFtZSlcclxuXHRcdGZvcihsZXQgZmllbGQgb2YgZmllbGRzKXtcclxuXHRcdFx0dHJ5e1xyXG5cdFx0XHRcdGl0ZW1zLnB1c2gobWV0YS5mcm9udG1hdHRlcltmaWVsZF0pO1xyXG5cdFx0XHR9Y2F0Y2goZXJyb3Ipe1xyXG5cdFx0XHRcdGl0ZW1zLnB1c2goXCItXCIpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gaXRlbXMuam9pbihzZXEpO1xyXG5cdH1cclxuXHJcblx0YXN5bmMgb3Blbl9ub3Rlc19pbl9zYW1lX2ZvbGRlcigpe1xyXG5cdFx0bGV0IGN1cnIgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlRmlsZSgpO1xyXG5cdFx0Y29uc3QgZmlsdGVyZWRGaWxlc18gPSB0aGlzLmFwcC52YXVsdC5nZXRNYXJrZG93bkZpbGVzKCkuZmlsdGVyKFxyXG5cdFx0XHQoZmlsZSk9PihcclxuXHRcdFx0XHQoZmlsZSE9Y3VycikgfCAodGhpcy5zZXR0aW5ncz8ud2l0aFNlbGYpXHJcblx0XHRcdCkmJihcclxuXHRcdFx0XHRmaWxlLnBhdGguc3RhcnRzV2l0aChjdXJyLnBhcmVudC5wYXRoKVxyXG5cdFx0XHQpXHJcblx0XHQpOyBcclxuXHRcdFxyXG5cdFx0bGV0IGZpbHRlcmVkRmlsZXMgPSB0aGlzLmNoYWluLnNvcnRfdGZpbGVzKFxyXG5cdFx0XHRmaWx0ZXJlZEZpbGVzXyxcclxuXHRcdFx0dGhpcy5zZXR0aW5ncy5maWVsZCxcclxuXHRcdCk7XHJcblx0XHRcclxuXHJcblx0XHRjb25zdCBub3RlID0gKFxyXG5cdFx0XHRhd2FpdCB0aGlzLnN1Z2dlc3RlcihcclxuXHRcdFx0XHQoZmlsZSkgPT4gZmlsZS5wYXRoLnNsaWNlKGN1cnIucGFyZW50LnBhdGgubGVuZ3RoKzEpLnNsaWNlKDAsLTMpLCBmaWx0ZXJlZEZpbGVzXHJcblx0XHRcdClcclxuXHRcdCk7IFxyXG5cclxuXHRcdGlmKG5vdGUpe1xyXG5cdFx0XHRpZih0aGlzLnNldHRpbmdzLm5ld1RhYil7XHJcblx0XHRcdFx0YXBwLndvcmtzcGFjZS5nZXRMZWFmKHRydWUpLm9wZW5GaWxlKG5vdGUpO1xyXG5cdFx0XHR9ZWxzZXtcclxuXHRcdFx0XHRhcHAud29ya3NwYWNlLmFjdGl2ZUxlYWYub3BlbkZpbGUobm90ZSk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGdldCBzdWdnZXN0ZXIoKXtcclxuXHRcdHJldHVybiBnZXRfdHBfZnVuYyh0aGlzLmFwcCxcInRwLnN5c3RlbS5zdWdnZXN0ZXJcIik7XHJcblx0fVxyXG5cdFxyXG5cdGdldF9maWxlX2NoYWluKGN1cnI9bnVsbCxwcmV2PTEwLG5leHQ9MTAsc2FtZUZvbGRlcj1mYWxzZSl7XHJcblxyXG5cdFx0aWYoY3Vycj09PW51bGwpe1xyXG5cdFx0XHRjdXJyID0gdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZUZpbGUoKTtcclxuXHRcdH1cclxuXHRcdGxldCByZXMgPSBBcnJheSgpO1xyXG5cdFx0cmVzLnB1c2goY3Vycik7XHJcblx0XHRcclxuXHRcdGxldCB0bXAgPSBjdXJyO1xyXG5cdFx0Zm9yKGxldCBpPXByZXY7aSE9MDtpLS0pe1xyXG5cdFx0XHRsZXQgbWV0YSA9IHRoaXMuYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKHRtcCk7XHJcblx0XHRcdFxyXG5cdFx0XHRpZighbWV0YSl7YnJlYWt9XHJcblx0XHJcblx0XHRcdGxldCBuYW1lID0gbWV0YS5mcm9udG1hdHRlcj8uUHJldk5vdGU7XHJcblx0XHRcdGlmKCFuYW1lKXticmVha31cclxuXHRcclxuXHRcdFx0bGV0IG5vdGUgPSB0aGlzLmdldF90ZmlsZShuYW1lKTtcclxuXHRcdFx0aWYoIW5vdGUgfCByZXMuaW5jbHVkZXMobm90ZSkpe1xyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHR9ZWxzZXtcclxuXHRcdFx0XHRyZXMudW5zaGlmdChub3RlKTtcclxuXHRcdFx0XHR0bXAgPSBub3RlO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHJcblx0XHR0bXAgPSBjdXJyO1xyXG5cdFx0Zm9yKGxldCBpPW5leHQ7aSE9MDtpLS0pe1xyXG5cdFx0XHRsZXQgbWV0YSA9IHRoaXMuYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKHRtcCk7XHJcblx0XHRcdFxyXG5cdFx0XHRpZighbWV0YSl7YnJlYWt9XHJcblx0XHJcblx0XHRcdGxldCBuYW1lID0gbWV0YS5mcm9udG1hdHRlcj8uTmV4dE5vdGU7XHJcblx0XHRcdGlmKCFuYW1lKXticmVha31cclxuXHRcclxuXHRcdFx0bGV0IG5vdGUgPSB0aGlzLmdldF90ZmlsZShuYW1lKTtcclxuXHRcdFx0aWYoIW5vdGUgfCByZXMuaW5jbHVkZXMobm90ZSkpe1xyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHR9ZWxzZXtcclxuXHRcdFx0XHRyZXMucHVzaChub3RlKTtcclxuXHRcdFx0XHR0bXAgPSBub3RlO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0aWYoc2FtZUZvbGRlcil7XHJcblx0XHRcdHJlcy5wdXNoKG51bGwpO1xyXG5cdFx0XHRsZXQgYWZpbGVzID0gdGhpcy5hcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpXHJcblx0XHRcdGZvcihsZXQgZiBvZiBhZmlsZXMpe1xyXG5cdFx0XHRcdGlmKGYucGFyZW50ID09IGN1cnI/LnBhcmVudCl7XHJcblx0XHRcdFx0XHRpZighcmVzLmluY2x1ZGVzKGYpKXtcclxuXHRcdFx0XHRcdFx0cmVzLnB1c2goZik7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdHJlcyA9IHJlcy5maWx0ZXIoXHJcblx0XHRcdFx0KGZpbGUpPT4oXHJcblx0XHRcdFx0XHQoZmlsZT09PW51bGwpIHwgKGZpbGU/LnBhdGguc3RhcnRzV2l0aChjdXJyLnBhcmVudC5wYXRoKSlcclxuXHRcdFx0XHQpXHJcblx0XHRcdCk7IFxyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHJlcztcclxuXHR9XHJcblxyXG5cdGFzeW5jIG9wZW5fbm90ZV9jaGFpbigpe1xyXG5cdFx0bGV0IGN1cnIgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlRmlsZSgpO1xyXG5cdFx0bGV0IGZpbGVzID0gdGhpcy5nZXRfZmlsZV9jaGFpbihcclxuXHRcdFx0Y3VycixcclxuXHRcdFx0TnVtYmVyKHRoaXMuc2V0dGluZ3MuUHJldkNoYWluKSxcclxuXHRcdFx0TnVtYmVyKHRoaXMuc2V0dGluZ3MuTmV4dENoYWluKSxcclxuXHRcdFx0dGhpcy5zZXR0aW5ncy5zYW1lRm9sZGVyLFxyXG5cdFx0KTtcclxuXHJcblx0XHRjb25zdCBub3RlID0gKFxyXG5cdFx0XHRhd2FpdCB0aGlzLnN1Z2dlc3RlcihcclxuXHRcdFx0XHQoZmlsZSkgPT4ge1xyXG5cdFx0XHRcdFx0aWYoIWZpbGUpe1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gJy0tLS0tXHVEODNEXHVEQ0MyLS0tLS0nO1xyXG5cdFx0XHRcdFx0fWVsc2UgaWYoZmlsZT09Y3Vycil7XHJcblx0XHRcdFx0XHRcdHJldHVybiBgXHVEODNDXHVERkUwICR7Y3Vyci5iYXNlbmFtZX1gO1xyXG5cdFx0XHRcdFx0fWVsc2V7XHJcblx0XHRcdFx0XHRcdHJldHVybiBmaWxlLnBhdGguc2xpY2UoY3Vyci5wYXJlbnQucGF0aC5sZW5ndGgrMSkuc2xpY2UoMCwtMylcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9LCBcclxuXHRcdFx0XHRmaWxlc1xyXG5cdFx0XHQpXHJcblx0XHQpOyBcclxuXHRcdCBpZihub3RlKXtcclxuXHRcdFx0IGlmKHRoaXMuc2V0dGluZ3MubmV3VGFiKXtcclxuXHRcdFx0XHR0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0TGVhZih0cnVlKS5vcGVuRmlsZShub3RlKTtcclxuXHRcdFx0fWVsc2V7XHJcblx0XHRcdFx0dGhpcy5hcHAud29ya3NwYWNlLmFjdGl2ZUxlYWYub3BlbkZpbGUobm90ZSk7XHJcblx0XHRcdH1cclxuXHRcdCB9XHJcblx0fVxyXG5cclxufVxyXG5cclxuY2xhc3MgWmlnU2V0dGluZ1RhYiBleHRlbmRzIFBsdWdpblNldHRpbmdUYWIge1xyXG5cdHBsdWdpbjogWmlnSG9sZGluZztcclxuXHJcblx0Y29uc3RydWN0b3IoYXBwOiBBcHAsIHBsdWdpbjogWmlnSG9sZGluZykge1xyXG5cdFx0c3VwZXIoYXBwLCBwbHVnaW4pO1xyXG5cdFx0dGhpcy5wbHVnaW4gPSBwbHVnaW47XHJcblx0fVxyXG5cclxuXHRkaXNwbGF5KCk6IHZvaWQge1xyXG5cdFx0Y29uc3Qge2NvbnRhaW5lckVsfSA9IHRoaXM7XHJcblxyXG5cdFx0Y29udGFpbmVyRWwuZW1wdHkoKTtcclxuXHJcblx0XHRjb250YWluZXJFbC5jcmVhdGVFbChcImgxXCIsIHsgdGV4dDogXCJaaWcgSG9sZGluZ1wiIH0pO1xyXG5cclxuXHRcdGNvbnRhaW5lckVsLmNyZWF0ZUVsKFwiaDNcIiwgeyB0ZXh0OiBcIlN3aXRjaCBOb3RlXCIgfSk7XHJcblxyXG5cdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcblx0XHRcdC5zZXROYW1lKCduZXdUYWInKVxyXG5cdFx0XHQuc2V0RGVzYygnXHU2NjJGXHU1NDI2XHU1NzI4XHU2NUIwXHU2ODA3XHU3QjdFXHU0RTJEXHU2MjUzXHU1RjAwXHU3QjE0XHU4QkIwPycpXHJcblx0XHRcdC5hZGRUb2dnbGUodGV4dCA9PiB0ZXh0XHJcblx0XHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLm5ld1RhYilcclxuXHRcdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5uZXdUYWIgPSB2YWx1ZTtcclxuXHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG5cdFx0XHRcdH0pXHJcblx0XHRcdCk7XHJcblx0XHRcclxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG5cdFx0XHQuc2V0TmFtZSgnd2l0aFNlbGYnKVxyXG5cdFx0XHQuc2V0RGVzYygnXHU2NjJGXHU1NDI2XHU2NjNFXHU3OTNBXHU1RjUzXHU1MjREXHU3QjE0XHU4QkIwPycpXHJcblx0XHRcdC5hZGRUb2dnbGUodGV4dCA9PiB0ZXh0XHJcblx0XHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLndpdGhTZWxmKVxyXG5cdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuXHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLndpdGhTZWxmID0gdmFsdWU7XHJcblx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFx0XHR9KVxyXG5cdFx0XHQpO1xyXG5cdFx0XHJcblx0XHRjb250YWluZXJFbC5jcmVhdGVFbChcImg0XCIsIHsgdGV4dDogXCJPcGVuIG5vdGUgaW4gc2FtZSBmb2xkZXJcIiB9KTtcclxuXHJcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuXHRcdFx0LnNldE5hbWUoJ3JldmVyc2UnKVxyXG5cdFx0XHQuc2V0RGVzYygnXHU2NjJGXHU1NDI2XHU5MDA2XHU1NDExXHU2MzkyXHU1RThGPycpXHJcblx0XHRcdC5hZGRUb2dnbGUodGV4dCA9PiB0ZXh0XHJcblx0XHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnJldmVyc2UpXHJcblx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG5cdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MucmV2ZXJzZSA9IHZhbHVlO1xyXG5cdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcblx0XHRcdFx0fSlcclxuXHRcdFx0KTtcclxuXHRcdFxyXG5cdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcblx0XHRcdC5zZXROYW1lKCdmaWVsZCcpXHJcblx0XHRcdC5zZXREZXNjKCdcdTdCMTRcdThCQjBcdTYzOTJcdTVFOEZcdTVCNTdcdTZCQjVcdUZGMUFtdGltZVx1RkYwQ1x1NEZFRVx1NjUzOVx1NjVGNlx1OTVGNFx1RkYxQmN0aW1lXHVGRjBDXHU1MjFCXHU1RUZBXHU2NUY2XHU5NUY0XHVGRjFCbmFtZSxcdTY1ODdcdTRFRjZcdTU0MERcdUZGMUJcdTYyMTZcdTUxNzZcdTVCODNcdTUxNDNcdTY1NzBcdTYzNkVcdTVCNTdcdTZCQjVcdTMwMDInKVxyXG5cdFx0XHQuYWRkVGV4dCh0ZXh0ID0+IHRleHRcclxuXHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZmllbGQpXHJcblx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG5cdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuZmllbGQgPSB2YWx1ZTtcclxuXHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG5cdFx0XHRcdH0pKTtcclxuXHRcdFxyXG5cdFx0Y29udGFpbmVyRWwuY3JlYXRlRWwoXCJoNFwiLCB7IHRleHQ6IFwiT3BlbiBub3RlIGNoYWluXCIgfSk7XHJcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuXHRcdFx0LnNldE5hbWUoJ1ByZXZDaGFpbicpXHJcblx0XHRcdC5zZXREZXNjKCdcdTUyNERcdTdGNkVcdTdCMTRcdThCQjBcdTY1NzBcdTc2RUUnKVxyXG5cdFx0XHQuYWRkVGV4dCh0ZXh0ID0+IHRleHRcclxuXHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuUHJldkNoYWluKVxyXG5cdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuXHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLlByZXZDaGFpbiA9IHZhbHVlO1xyXG5cdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcblx0XHRcdFx0fSkpO1xyXG5cclxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG5cdFx0XHQuc2V0TmFtZSgnTmV4dENoYWluJylcclxuXHRcdFx0LnNldERlc2MoJ1x1NTQwRVx1N0Y2RVx1N0IxNFx1OEJCMFx1NjU3MFx1NzZFRScpXHJcblx0XHRcdC5hZGRUZXh0KHRleHQgPT4gdGV4dFxyXG5cdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5OZXh0Q2hhaW4pXHJcblx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG5cdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuTmV4dENoYWluID0gdmFsdWU7XHJcblx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFx0XHR9KSk7XHJcblx0XHRcclxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG5cdFx0XHRcdC5zZXROYW1lKCdzYW1lRm9sZGVyJylcclxuXHRcdFx0XHQuc2V0RGVzYygnXHU0RUM1XHU2NjNFXHU3OTNBXHU1RjUzXHU1MjREXHU2NTg3XHU0RUY2XHU1OTM5XHU0RTJEXHU5NEZFXHU4REVGXHVGRjBDXHU1NDBDXHU2NUY2XHU1QzU1XHU3OTNBXHU0RTBEXHU1NzI4XHU5NEZFXHU4REVGXHU3Njg0XHU2NTg3XHU0RUY2JylcclxuXHRcdFx0XHQuYWRkVG9nZ2xlKHRleHQgPT4gdGV4dFxyXG5cdFx0XHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnNhbWVGb2xkZXIpXHJcblx0XHRcdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcblx0XHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLnNhbWVGb2xkZXIgPSB2YWx1ZTtcclxuXHRcdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcblx0XHRcdFx0XHR9KVxyXG5cdFx0XHRcdCk7XHJcblx0XHRcdFxyXG5cdFx0Y29udGFpbmVyRWwuY3JlYXRlRWwoXCJoM1wiLCB7IHRleHQ6IFwiTm90ZSBDaGFpblwiIH0pO1xyXG5cdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcblx0XHRcdFx0LnNldE5hbWUoJ3Nob3dMaW5rJylcclxuXHRcdFx0XHQuc2V0RGVzYygnXHU2NjJGXHU1NDI2XHU5MDA5XHU2MkU5XHU2NUY2XHU2NjNFXHU3OTNBXHU3QjE0XHU4QkIwXHU5NEZFXHU2M0E1JylcclxuXHRcdFx0XHQuYWRkVG9nZ2xlKHRleHQgPT4gdGV4dFxyXG5cdFx0XHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnNob3dMaW5rKVxyXG5cdFx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG5cdFx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5zaG93TGluayA9IHZhbHVlO1xyXG5cdFx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFx0XHRcdH0pXHJcblx0XHRcdFx0KTtcclxuXHJcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuXHRcdFx0XHQuc2V0TmFtZSgncG9wRmlyc3QnKVxyXG5cdFx0XHRcdC5zZXREZXNjKCdcdTYzRDJcdTUxNjVcdTUyNERcdTk0RkVcdTYzQTVcdTVGNTNcdTUyNERcdTdCMTRcdThCQjBcdTUyNERcdTU0MEVcdTdGNkVcdTdCMTRcdThCQjAnKVxyXG5cdFx0XHRcdC5hZGRUb2dnbGUodGV4dCA9PiB0ZXh0XHJcblx0XHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MucG9wRmlyc3QpXHJcblx0XHRcdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcblx0XHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLnBvcEZpcnN0ID0gdmFsdWU7XHJcblx0XHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG5cdFx0XHRcdFx0fSlcclxuXHRcdFx0XHQpO1xyXG5cclxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG5cdFx0XHRcdC5zZXROYW1lKCdvcGVuTGluaycpXHJcblx0XHRcdFx0LnNldERlc2MoJ1x1OTAwOVx1NjJFOVx1NTQwRVx1NjYyRlx1NTQyNlx1NjI1M1x1NUYwMFx1N0IxNFx1OEJCMCcpXHJcblx0XHRcdFx0LmFkZFRvZ2dsZSh0ZXh0ID0+IHRleHRcclxuXHRcdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5vcGVuTGluaylcclxuXHRcdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuXHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3Mub3BlbkxpbmsgPSB2YWx1ZTtcclxuXHRcdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcblx0XHRcdFx0XHR9KVxyXG5cdFx0XHRcdCk7XHJcblxyXG5cdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcblx0XHRcdFx0LnNldE5hbWUoJ2FsbEZpbGVzJylcclxuXHRcdFx0XHQuc2V0RGVzYygnXHU2NjJGXHU1NDI2XHU0RUNFXHU2MjQwXHU2NzA5XHU3QjE0XHU4QkIwXHU0RTJEXHU5MDA5XHU2MkU5JylcclxuXHRcdFx0XHQuYWRkVG9nZ2xlKHRleHQgPT4gdGV4dFxyXG5cdFx0XHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmFsbEZpbGVzKVxyXG5cdFx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG5cdFx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5hbGxGaWxlcyA9IHZhbHVlO1xyXG5cdFx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFx0XHRcdH0pXHJcblx0XHRcdFx0KTtcclxuXHRcdFxyXG5cdFx0Y29udGFpbmVyRWwuY3JlYXRlRWwoXCJoM1wiLCB7IHRleHQ6IFwiXHU1MjFEXHU1OUNCXHU1MzE2XCIgfSk7XHJcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuXHRcdFx0XHQuc2V0TmFtZSgncmVmcmVzaERhdGFWaWV3JylcclxuXHRcdFx0XHQuc2V0RGVzYygnXHU2MjUzXHU1RjAwXHU2NUIwXHU3QjE0XHU4QkIwXHU2NUY2XHU1MjM3XHU2NUIwRGF0YXZpZXdcdUZGMUYnKVxyXG5cdFx0XHRcdC5hZGRUb2dnbGUodGV4dCA9PiB0ZXh0XHJcblx0XHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MucmVmcmVzaERhdGFWaWV3KVxyXG5cdFx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG5cdFx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5yZWZyZXNoRGF0YVZpZXcgPSB2YWx1ZTtcclxuXHRcdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcblx0XHRcdFx0XHR9KVxyXG5cdFx0XHRcdCk7XHJcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuXHRcdFx0XHQuc2V0TmFtZSgncmVmcmVzaFRhc2tzJylcclxuXHRcdFx0XHQuc2V0RGVzYygnXHU2MjUzXHU1RjAwXHU2NUIwXHU3QjE0XHU4QkIwXHU2NUY2XHU1MjM3XHU2NUIwVGFza3NcdUZGMUYnKVxyXG5cdFx0XHRcdC5hZGRUb2dnbGUodGV4dCA9PiB0ZXh0XHJcblx0XHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MucmVmcmVzaFRhc2tzKVxyXG5cdFx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG5cdFx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5yZWZyZXNoVGFza3MgPSB2YWx1ZTtcclxuXHRcdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcblx0XHRcdFx0XHR9KVxyXG5cdFx0XHRcdCk7XHJcblx0fVxyXG59XHJcbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxzQkFLTztBQWlCUCxJQUFNLG1CQUFnQztBQUFBLEVBQ3JDLFFBQVM7QUFBQSxFQUNULFVBQVc7QUFBQSxFQUNYLFNBQVU7QUFBQSxFQUNWLE9BQVE7QUFBQSxFQUNSLFdBQVk7QUFBQSxFQUNaLFdBQVk7QUFBQSxFQUNa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LE9BQU8sU0FBUyxXQUFXO0FBQ2hDLGNBQU0sS0FBSyxPQUFPLGFBQWE7QUFBQSxNQUNoQyxDQUFDO0FBQUEsSUFDRjtBQUVGLGdCQUFZLFNBQVMsTUFBTSxFQUFFLE1BQU0scUJBQU0sQ0FBQztBQUMxQyxRQUFJLHdCQUFRLFdBQVcsRUFDcEIsUUFBUSxpQkFBaUIsRUFDekIsUUFBUSxnRUFBbUIsRUFDM0I7QUFBQSxNQUFVLFVBQVEsS0FDakIsU0FBUyxLQUFLLE9BQU8sU0FBUyxlQUFlLEVBQzdDLFNBQVMsT0FBTyxVQUFVO0FBQzFCLGFBQUssT0FBTyxTQUFTLGtCQUFrQjtBQUN2QyxjQUFNLEtBQUssT0FBTyxhQUFhO0FBQUEsTUFDaEMsQ0FBQztBQUFBLElBQ0Y7QUFDRixRQUFJLHdCQUFRLFdBQVcsRUFDcEIsUUFBUSxjQUFjLEVBQ3RCLFFBQVEsNkRBQWdCLEVBQ3hCO0FBQUEsTUFBVSxVQUFRLEtBQ2pCLFNBQVMsS0FBSyxPQUFPLFNBQVMsWUFBWSxFQUMxQyxTQUFTLE9BQU8sVUFBVTtBQUMxQixhQUFLLE9BQU8sU0FBUyxlQUFlO0FBQ3BDLGNBQU0sS0FBSyxPQUFPLGFBQWE7QUFBQSxNQUNoQyxDQUFDO0FBQUEsSUFDRjtBQUFBLEVBQ0g7QUFDRDsiLAogICJuYW1lcyI6IFsiYXBwIiwgIm1vZGUiLCAiZiIsICJtZXRhIiwgInByb21wdCJdCn0K
