/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  newTab: true,
  withSelf: true,
  reverse: true,
  field: "NID",
  PrevChain: "10",
  NextChain: "10",
  showLink: true,
  openLink: true
};
var NoteChain = class {
  constructor(app2, prev = "PrevNote", next = "NextNote") {
    this.app = app2;
    this.prev = prev;
    this.next = next;
    this.dv_api = this.app.plugins.getPlugin(
      "dataview"
    );
  }
  get_tfile(path, files) {
    if (!path) {
      return null;
    }
    if (files.includes(path)) {
      return files[path];
    }
    for (let file of files) {
      if (file.name.toLowerCase().localeCompare(path.toLowerCase()) == 0) {
        return file;
      }
      if (file.basename.toLowerCase().localeCompare(path.toLowerCase()) == 0) {
        return file;
      }
      if (`[[${file.basename.toLowerCase()}]]`.localeCompare(path.toLowerCase()) == 0) {
        return file;
      }
      if (file.basename.toLowerCase().localeCompare(`[[${path.toLowerCase()}]]`) == 0) {
        return file;
      }
    }
    return null;
  }
  get MDFiles() {
    return app.vault.getMarkdownFiles();
  }
  get current_note() {
    return this.app.workspace.getActiveFile();
  }
  get_inlinks(tfile) {
    let res = new Array();
    let inlinks = this.dv_api.index.links.invMap.get(tfile.path);
    if (inlinks == void 0) {
      return [];
    } else {
      return Array.from(inlinks).map(
        (path) => this.app.vault.fileMap[path]
      ).filter(
        (item) => item
      );
    }
  }
  get_outlinks(tfile) {
    let res = new Array();
    let inlinks = this.dv_api.index.links.map.get(tfile.path);
    if (inlinks == void 0) {
      return [];
    } else {
      return Array.from(inlinks).map(
        (path) => this.app.vault.fileMap[path]
      ).filter(
        (item) => item
      );
    }
  }
  get_links(tfile) {
    let inlinks = this.get_inlinks(tfile);
    let outlinks = this.get_outlinks(tfile);
    for (let link of inlinks) {
      if (!outlinks.includes(link)) {
        outlinks.push(link);
      }
    }
    return outlinks;
  }
  get_first_note(tfile) {
    let res = new Array();
    res.push(tfile);
    let tmp = tfile;
    while (true) {
      let prev = this.get_prev_notes(tmp, this.prev, this.next, true);
      if (prev[0] && !res.includes(prev[1][0])) {
        res.unshift(prev[1][0]);
        tmp = prev[1][0];
      } else {
        break;
      }
    }
    return tmp;
  }
  get_last_note(tfile) {
    let res = new Array();
    res.push(tfile);
    let tmp = tfile;
    while (true) {
      let next = this.get_next_notes(tmp, this.prev, this.next, true);
      if (next[0] && !res.includes(next[1][0])) {
        res.push(next[1][0]);
        tmp = next[1][0];
        console.log(tmp);
      } else {
        break;
      }
    }
    return tmp;
  }
  get_file_chain(tfile, prev = 10, next = 10) {
    var _a, _b;
    let res = Array();
    res.push(tfile);
    let tmp = tfile;
    for (let i = prev; i != 0; i--) {
      console.log(i);
      let meta = this.app.metadataCache.getFileCache(tmp);
      if (!meta) {
        break;
      }
      let name = (_a = meta.frontmatter) == null ? void 0 : _a.PrevNote;
      if (!name) {
        break;
      }
      let note = this.get_tfile(name);
      if (!note) {
        break;
      } else if (res.includes(note)) {
        this.set_frontmatter(note, this.next, "");
        this.set_frontmatter(tmp, this.prev, "");
        break;
      } else {
        res.unshift(note);
        tmp = note;
      }
    }
    tmp = tfile;
    for (let i = next; i != 0; i--) {
      let meta = this.app.metadataCache.getFileCache(tmp);
      if (!meta) {
        break;
      }
      let name = (_b = meta.frontmatter) == null ? void 0 : _b.NextNote;
      if (!name) {
        break;
      }
      let note = this.get_tfile(name);
      if (!note) {
        break;
      } else if (res.includes(note)) {
        this.set_frontmatter(note, this.prev, "");
        this.set_frontmatter(tmp, this.next, "");
        break;
      } else {
        res.push(note);
        tmp = note;
      }
    }
  }
  get_prev_notes(tfile, prev = "PrevNote", next = "NextNote", onlyFrontmatter = true) {
    let res = new Array();
    let notes = this.get_links(tfile);
    let meta = this.app.metadataCache.getFileCache(tfile);
    let flag = false;
    if (meta == null ? void 0 : meta.frontmatter) {
      let name = meta.frontmatter[prev];
      if (name) {
        let note = this.get_tfile(name, notes);
        res.push(note);
        flag = true;
      }
    }
    if (onlyFrontmatter) {
      return [flag, res];
    }
    for (let note of notes) {
      if (res.includes(note)) {
        continue;
      }
      if (!note) {
        continue;
      }
      let meta2 = this.app.metadataCache.getFileCache(note);
      if (meta2 == null ? void 0 : meta2.frontmatter) {
        let name = meta2.frontmatter[next];
        if (this.get_tfile(name, [tfile])) {
          res.push(note);
        }
      }
    }
    return [flag, res];
  }
  get_next_notes(tfile, prev = "PrevNote", next = "NextNote", onlyFrontmatter = true) {
    return this.get_prev_notes(tfile, next, prev, onlyFrontmatter);
  }
  get_neighbors(tfile) {
    let tmp = this.get_prev_notes(tfile, this.prev, this.next, true);
    let pflag = tmp[0];
    let prev = tmp[1];
    let tmp2 = this.get_next_notes(tfile, this.prev, this.next, true);
    let nflag = tmp2[0];
    let next = tmp2[1];
    if (pflag && nflag) {
      return [prev[0], next[0]];
    } else if (pflag) {
      return [prev[0], void 0];
    } else if (nflag) {
      return [void 0, next[0]];
    } else {
      return [void 0, void 0];
    }
  }
  async set_frontmatter(tfile, key, value) {
    await this.app.fileManager.processFrontMatter(tfile, (fm) => {
      console.log(`${tfile.basename}---${key}---${value}`);
      fm[key] = value;
    });
  }
  get_frontmatter(tfile, key) {
    let meta = this.app.metadataCache.getFileCache(tfile);
    if (meta == null ? void 0 : meta.frontmatter) {
      return meta.frontmatter[key];
    }
  }
  pop_node(tfile) {
    let neighbor = this.get_neighbors(tfile);
    if (neighbor[0] != null && neighbor[1] != null) {
      this.set_frontmatter(neighbor[0], this.next, `[[${neighbor[1].basename}]]`);
      this.set_frontmatter(neighbor[1], this.prev, `[[${neighbor[0].basename}]]`);
    } else if (neighbor[0] != null) {
      this.set_frontmatter(neighbor[0], this.next, ``);
    } else if (neighbor[1] != null) {
      this.set_frontmatter(neighbor[1], this.prev, ``);
    }
  }
  insert_node_as_head(tfile, anchor) {
    if (head == tfile) {
      return;
    }
    let head = this.get_first_note(anchor);
    this.set_frontmatter(tfile, this.next, `[[${head.basename}]]`);
    this.set_frontmatter(head, this.prev, `[[${tfile.basename}]]`);
  }
  insert_node_as_tail(tfile, anchor) {
    let tail = this.get_last_note(anchor);
    if (tfile == tail) {
      return;
    }
    this.set_frontmatter(tfile, this.prev, `[[${tail.basename}]]`);
    this.set_frontmatter(tail, this.next, `[[${tfile.basename}]]`);
  }
  insert_node_after(tfile, anchor) {
    let next = this.get_next_notes(anchor, this.prev, this.next, true);
    if (next[0] && next[1][0] != tfile && next[1][0] != anchor) {
      this.set_frontmatter(next[1][0], this.prev, `[[${tfile.basename}]]`);
      this.set_frontmatter(tfile, this.next, `[[${next[1][0].basename}]]`);
    }
    this.set_frontmatter(tfile, this.prev, `[[${anchor.basename}]]`);
    this.set_frontmatter(anchor, this.next, `[[${tfile.basename}]]`);
  }
  insert_node_before(tfile, anchor) {
    let prev = this.get_prev_notes(anchor, this.prev, this.next, true);
    if (prev[0] && prev[1][0] != tfile && prev[1][0] != anchor) {
      this.set_frontmatter(prev[1][0], this.next, `[[${tfile.basename}]]`);
      this.set_frontmatter(tfile, this.prev, `[[${prev[1][0].basename}]]`);
    }
    this.set_frontmatter(tfile, this.next, `[[${anchor.basename}]]`);
    this.set_frontmatter(anchor, this.prev, `[[${tfile.basename}]]`);
  }
};
var SampleModal = class extends import_obsidian.Modal {
  constructor(app2) {
    super(app2);
  }
  onOpen() {
    const { contentEl } = this;
    console.log("afa", this);
    contentEl.setText("[[set_seq_notes_config]]");
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var MyPlugin = class extends import_obsidian.Plugin {
  async onload() {
    this.chain = new NoteChain(this.app);
    await this.loadSettings();
    this.dataview = this.app.plugins.getPlugin(
      "dataview"
    );
    this.templater = this.app.plugins.getPlugin(
      "templater-obsidian"
    );
    this.addCommand({
      id: "chain_insert_node",
      name: "Chain-->chain_insert_node",
      callback: () => {
        this.chain_insert_node();
      }
    });
    this.addCommand({
      id: "chain_set_seq_note",
      name: "Chian-->Auto Set Chain by ctime",
      callback: () => {
        this.yaml_set_seq_notes();
      }
    });
    this.addCommand({
      id: "open_notes_in_same_folder",
      name: "Open notes in same folder",
      callback: () => {
        this.open_notes_in_same_folder();
      }
    });
    this.addCommand({
      id: "open_note_chain",
      name: "Chain-->Open note chain",
      callback: () => {
        this.open_note_chain();
      }
    });
    this.addCommand({
      id: "open-sample-modal-simple",
      name: "Open sample modal (simple)",
      callback: () => {
        this.showNoteContent();
      }
    });
    this.addCommand({
      id: "open-sample-modal-complex",
      name: "Open sample modal (complex)",
      checkCallback: (checking) => {
        const markdownView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
        if (markdownView) {
          if (!checking) {
            new SampleModal(this.app).open();
          }
          return true;
        }
      }
    });
    this.addSettingTab(new SampleSettingTab(this.app, this));
  }
  onunload() {
  }
  async showNoteContent() {
    const activeFile = this.app.workspace.getActiveFile();
    if (!activeFile)
      return;
    const noteContent = await this.app.vault.read(activeFile);
    const modal = new import_obsidian.Modal(this.app);
    const markdownView = new import_obsidian.MarkdownView(this.app.workspace);
    modal.setContent(markdownView.containerEl);
    console.log(noteContent);
    markdownView.sourceMode.cmEditor.setValue(noteContent);
    this.app.xmodal = modal;
    this.app.xview = markdownView;
    this.app.xmdv = app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    modal.open();
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  get_tp_func(target) {
    let items = target.split(".");
    if (items[0].localeCompare("tp") != 0 | items.length != 3) {
      return void 0;
    }
    let modules = this.templater.templater.functions_generator.internal_functions.modules_array.filter(
      (item) => item.name.localeCompare(items[1]) == 0
    );
    if (modules.length == 0) {
      return void 0;
    }
    return modules[0].static_functions.get(items[2]);
  }
  get_tfile(path) {
    let files = app.vault.getMarkdownFiles();
    if (files.includes(path)) {
      return files[path];
    }
    for (let file of files) {
      if (file.name.toLowerCase().localeCompare(path.toLowerCase()) == 0) {
        return file;
      }
      if (file.basename.toLowerCase().localeCompare(path.toLowerCase()) == 0) {
        return file;
      }
      if (`[[${file.basename.toLowerCase()}]]`.localeCompare(path.toLowerCase()) == 0) {
        return file;
      }
    }
    return null;
  }
  get_tfile_config(tfile, suffix = "_config") {
    return this.get_tfile(tfile.basename + suffix);
  }
  async select_value_of_list(targets, prompt2 = null) {
    let func = this.get_tp_func("tp.system.suggester");
    const target = await func(
      targets,
      targets,
      false,
      prompt2
    );
    return target;
  }
  async chain_insert_node() {
    let curr = app.workspace.getActiveFile();
    let filteredFiles = app.vault.getMarkdownFiles().sort(
      (a, b) => b.stat.mtime - a.stat.mtime
    );
    if (!this.settings.allFiles) {
      filteredFiles = filteredFiles.filter(
        (file) => file != curr && file.parent == curr.parent
      );
    } else {
      filteredFiles = filteredFiles.filter(
        (file) => file != curr
      );
    }
    let func = this.get_tp_func("tp.system.suggester");
    const note = await func(
      (file) => this.tfile_to_strint(
        file,
        this.settings.showLink ? ["PrevNote", "NextNote"] : [],
        "			\u26A1  "
      ),
      filteredFiles
    );
    if (!note) {
      return;
    }
    let mode2 = await this.select_value_of_list([
      "insert_node_as_head",
      "insert_node_as_tail",
      "insert_node_before",
      "insert_node_after"
    ], prompt = "Select Node Insert Mode.");
    if (!mode2) {
      return;
    }
    console.log(typeof mode2, mode2);
    if (this.settings.popFirst) {
      this.chain.pop_node(curr);
    }
    if (mode2.localeCompare("insert_node_as_head") == 0) {
      this.chain.insert_node_as_head(curr, note);
    } else if (mode2.localeCompare("insert_node_as_tail") == 0) {
      this.chain.insert_node_as_tail(curr, note);
    } else if (mode2.localeCompare("insert_node_before") == 0) {
      this.chain.insert_node_before(curr, note);
    } else if (mode2.localeCompare("insert_node_after") == 0) {
      this.chain.insert_node_after(curr, note);
    } else {
      return;
    }
    if (this.settings.openLink) {
      if (note) {
        if (this.settings.newTab) {
          this.app.workspace.getLeaf(true).openFile(note);
        } else {
          this.app.workspace.activeLeaf.openFile(note);
        }
      }
    }
  }
  tfile_to_strint(tfile, fields, seq) {
    let meta = this.app.metadataCache.getFileCache(tfile);
    let items = new Array();
    items.push(tfile.basename);
    for (let field of fields) {
      try {
        items.push(meta.frontmatter[field]);
      } catch (error) {
        items.push("-");
      }
    }
    return items.join(seq);
  }
  yaml_set_seq_notes() {
    var _a, _b, _c, _d;
    let curr = this.app.workspace.getActiveFile();
    const xfiles = this.app.vault.getMarkdownFiles().filter(
      (file) => {
        return file.parent == curr.parent;
      }
    );
    let mode2 = this.select_value_of_list(
      ["name", "ctime", "mtime"],
      prompt = "\u9009\u62E9\u6392\u5E8F\u6A21\u578B"
    );
    let files = this.sort_tfiles(xfiles, mode2);
    for (let i = 0; i < files.length - 1; i++) {
      let neighbor = this.chain.get_neighbors(files[i]);
      if (neighbor[0] == void 0 && neighbor[1] == void 0) {
      }
      let meta2 = this.app.metadataCache.getFileCache(files[i]);
      if (!meta2 | (!((_a = meta2.frontmatter) == null ? void 0 : _a.PrevNote) && !((_b = meta2.frontmatter) == null ? void 0 : _b.NextNote))) {
        this.yaml_set_prev_and_next_notes(files[i], files[i + 1]);
      }
    }
    let meta = app.metadataCache.getFileCache(files[files.length - 1]);
    if (!meta | (!((_c = meta.frontmatter) == null ? void 0 : _c.PrevNote) && !((_d = meta.frontmatter) == null ? void 0 : _d.NextNote))) {
      this.yaml_set_prev_and_next_notes(files[files.length - 2], files[files.length - 1]);
    }
  }
  async open_notes_in_same_folder() {
    let curr = this.app.workspace.getActiveFile();
    const filteredFiles_ = this.app.vault.getMarkdownFiles().filter(
      (file) => {
        var _a;
        return file != curr | ((_a = this.settings) == null ? void 0 : _a.withSelf) && file.path.startsWith(curr.parent.path);
      }
    );
    let filteredFiles = this.sort_tfiles(
      filteredFiles_,
      this.settings.field,
      this.settings.reverse
    );
    let func = this.get_tp_func("tp.system.suggester");
    const note = await func(
      (file) => file.path.slice(curr.parent.path.length + 1).slice(0, -3),
      filteredFiles
    );
    if (note) {
      if (this.settings.newTab) {
        app.workspace.getLeaf(true).openFile(note);
      } else {
        app.workspace.activeLeaf.openFile(note);
      }
    }
  }
  xreverse(res, reverse) {
    if (reverse) {
      return res.reverse();
    } else {
      return res;
    }
  }
  sort_tfiles(files, field, reverse = false) {
    var res;
    if (field.localeCompare("name") == 0) {
      res = files.sort(
        (a, b) => a.name.localeCompare(b.name)
      );
    } else if (field.localeCompare("mtime") == 0) {
      res = files.sort(
        (a, b) => a.stat.mtime - b.stat.mtime
      );
    } else if (field.localeCompare("ctime") == 0) {
      res = files.sort(
        (a, b) => a.stat.ctime - b.stat.ctime
      );
    } else if (field.localeCompare("chain") == 0) {
      res = files.sort(
        (a, b) => {
          let ameta = this.app.metadataCache.getFileCache(a).frontmatter;
          let bmeta = this.app.metadataCache.getFileCache(b).frontmatter;
          if (!ameta && !bmeta) {
            return 0;
          } else if (!ameta) {
            return bmeta[field];
          } else if (!bmeta) {
            return ameta[field];
          } else {
            return ameta[field] - bmeta[field];
          }
        }
      );
    } else {
      res = files.sort(
        (a, b) => {
          let ameta = this.app.metadataCache.getFileCache(a).frontmatter;
          let bmeta = this.app.metadataCache.getFileCache(b).frontmatter;
          if (!ameta && !bmeta) {
            return 0;
          } else if (!ameta) {
            return bmeta[field];
          } else if (!bmeta) {
            return ameta[mode];
          } else {
            return ameta[field] - bmeta[field];
          }
        }
      );
    }
    return this.xreverse(res, reverse);
  }
  get_file_chain(curr = null, prev = 10, next = 10, sameFolder = false) {
    var _a, _b;
    if (curr === null) {
      curr = this.app.workspace.getActiveFile();
    }
    let res = Array();
    res.push(curr);
    let tmp = curr;
    for (let i = prev; i != 0; i--) {
      let meta = this.app.metadataCache.getFileCache(tmp);
      if (!meta) {
        break;
      }
      let name = (_a = meta.frontmatter) == null ? void 0 : _a.PrevNote;
      if (!name) {
        break;
      }
      let note = this.get_tfile(name);
      if (!note | res.includes(note)) {
        break;
      } else {
        res.unshift(note);
        tmp = note;
      }
    }
    tmp = curr;
    for (let i = next; i != 0; i--) {
      let meta = this.app.metadataCache.getFileCache(tmp);
      if (!meta) {
        break;
      }
      let name = (_b = meta.frontmatter) == null ? void 0 : _b.NextNote;
      if (!name) {
        break;
      }
      let note = this.get_tfile(name);
      if (!note | res.includes(note)) {
        break;
      } else {
        res.push(note);
        tmp = note;
      }
    }
    if (sameFolder) {
      res.push(null);
      let afiles = this.app.vault.getMarkdownFiles();
      for (let f of afiles) {
        if (f.parent == (curr == null ? void 0 : curr.parent)) {
          if (!res.includes(f)) {
            res.push(f);
          }
        }
      }
      res = res.filter(
        (file) => file === null | (file == null ? void 0 : file.path.startsWith(curr.parent.path))
      );
    }
    return res;
  }
  async open_note_chain() {
    let curr = this.app.workspace.getActiveFile();
    let files = this.get_file_chain(
      curr,
      Number(this.settings.PrevChain),
      Number(this.settings.NextChain),
      this.settings.sameFolder
    );
    let func = this.get_tp_func("tp.system.suggester");
    const note = await func(
      (file) => {
        if (!file) {
          return "-----\u{1F4C2}-----";
        } else if (file == curr) {
          return `\u{1F3E0} ${curr.basename}`;
        } else {
          return file.path.slice(curr.parent.path.length + 1).slice(0, -3);
        }
      },
      files
    );
    if (note) {
      if (this.settings.newTab) {
        this.app.workspace.getLeaf(true).openFile(note);
      } else {
        this.app.workspace.activeLeaf.openFile(note);
      }
    }
  }
};
var SampleSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h1", { text: "Zig Holding" });
    containerEl.createEl("h3", { text: "Switch Note" });
    new import_obsidian.Setting(containerEl).setName("newTab").setDesc("\u662F\u5426\u5728\u65B0\u6807\u7B7E\u4E2D\u6253\u5F00\u7B14\u8BB0?").addToggle(
      (text) => text.setValue(this.plugin.settings.newTab).onChange(async (value) => {
        this.plugin.settings.newTab = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("withSelf").setDesc("\u662F\u5426\u663E\u793A\u5F53\u524D\u7B14\u8BB0?").addToggle(
      (text) => text.setValue(this.plugin.settings.withSelf).onChange(async (value) => {
        this.plugin.settings.withSelf = value;
        await this.plugin.saveSettings();
      })
    );
    containerEl.createEl("h4", { text: "Open note in same folder" });
    new import_obsidian.Setting(containerEl).setName("reverse").setDesc("\u662F\u5426\u9006\u5411\u6392\u5E8F?").addToggle(
      (text) => text.setValue(this.plugin.settings.reverse).onChange(async (value) => {
        this.plugin.settings.reverse = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("field").setDesc("\u7B14\u8BB0\u6392\u5E8F\u5B57\u6BB5\uFF1Amtime\uFF0C\u4FEE\u6539\u65F6\u95F4\uFF1Bctime\uFF0C\u521B\u5EFA\u65F6\u95F4\uFF1Bname,\u6587\u4EF6\u540D\uFF1B\u6216\u5176\u5B83\u5143\u6570\u636E\u5B57\u6BB5\u3002").addText((text) => text.setValue(this.plugin.settings.field).onChange(async (value) => {
      this.plugin.settings.field = value;
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("h4", { text: "Open note chain" });
    new import_obsidian.Setting(containerEl).setName("PrevChain").setDesc("\u524D\u7F6E\u7B14\u8BB0\u6570\u76EE").addText((text) => text.setValue(this.plugin.settings.PrevChain).onChange(async (value) => {
      this.plugin.settings.PrevChain = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("NextChain").setDesc("\u540E\u7F6E\u7B14\u8BB0\u6570\u76EE").addText((text) => text.setValue(this.plugin.settings.NextChain).onChange(async (value) => {
      this.plugin.settings.NextChain = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("sameFolder").setDesc("\u4EC5\u663E\u793A\u5F53\u524D\u6587\u4EF6\u5939\u4E2D\u94FE\u8DEF\uFF0C\u540C\u65F6\u5C55\u793A\u4E0D\u5728\u94FE\u8DEF\u7684\u6587\u4EF6").addToggle(
      (text) => text.setValue(this.plugin.settings.sameFolder).onChange(async (value) => {
        this.plugin.settings.sameFolder = value;
        await this.plugin.saveSettings();
      })
    );
    containerEl.createEl("h3", { text: "Note Chain" });
    new import_obsidian.Setting(containerEl).setName("showLink").setDesc("\u662F\u5426\u9009\u62E9\u65F6\u663E\u793A\u7B14\u8BB0\u94FE\u63A5").addToggle(
      (text) => text.setValue(this.plugin.settings.showLink).onChange(async (value) => {
        this.plugin.settings.showLink = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("popFirst").setDesc("\u63D2\u5165\u524D\u94FE\u63A5\u5F53\u524D\u7B14\u8BB0\u524D\u540E\u7F6E\u7B14\u8BB0").addToggle(
      (text) => text.setValue(this.plugin.settings.popFirst).onChange(async (value) => {
        this.plugin.settings.popFirst = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("openLink").setDesc("\u9009\u62E9\u540E\u662F\u5426\u6253\u5F00\u7B14\u8BB0").addToggle(
      (text) => text.setValue(this.plugin.settings.openLink).onChange(async (value) => {
        this.plugin.settings.openLink = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("allFiles").setDesc("\u662F\u5426\u4ECE\u6240\u6709\u7B14\u8BB0\u4E2D\u9009\u62E9").addToggle(
      (text) => text.setValue(this.plugin.settings.allFiles).onChange(async (value) => {
        this.plugin.settings.allFiles = value;
        await this.plugin.saveSettings();
      })
    );
  }
};
//# sourceMappingURL=data:application/json;base64,
