/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ZigHolding
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  newTab: true,
  withSelf: true,
  reverse: true,
  field: "NID",
  PrevChain: "10",
  NextChain: "10",
  showLink: true,
  openLink: true,
  refreshDataView: true,
  refreshTasks: true
};
function get_tp_func(app2, target) {
  let templater = app2.plugins.getPlugin(
    "templater-obsidian"
  );
  let items = target.split(".");
  if (items[0].localeCompare("tp") != 0 || items.length != 3) {
    return void 0;
  }
  let modules = templater.templater.functions_generator.internal_functions.modules_array.filter(
    (item) => item.name.localeCompare(items[1]) == 0
  );
  if (modules.length == 0) {
    return void 0;
  }
  return modules[0].static_functions.get(items[2]);
}
var ZigEditor = class {
  constructor(app2) {
    this.app = app2;
  }
  regexp_link(tfile, mode2) {
    if (mode2 === "link") {
      return new RegExp(`\\[\\[${tfile.basename}\\|?.*\\]\\]`, "g");
    }
    if (mode2 === "para") {
      return new RegExp(`.*\\[\\[${tfile.basename}\\|?.*\\]\\].*`, "g");
    }
  }
  replace(tfile, regex, target) {
    this.app.vault.process(tfile, (data) => {
      return data.replace(regex, target);
    });
  }
};
var NoteChain = class {
  constructor(app2, prev = "PrevNote", next = "NextNote") {
    this.app = app2;
    this.prev = prev;
    this.next = next;
    this.dv_api = this.app.plugins.getPlugin(
      "dataview"
    );
  }
  get find_tfile() {
    return get_tp_func(this.app, "tp.file.find_tfile");
  }
  get suggester() {
    return get_tp_func(this.app, "tp.system.suggester");
  }
  get_tfile(path) {
    let name = path.split("|")[0].replace("[[", "").replace("]]", "");
    return this.find_tfile(name);
  }
  get MDFiles() {
    return app.vault.getMarkdownFiles();
  }
  get current_note() {
    return this.app.workspace.getActiveFile();
  }
  get_inlinks(tfile = this.current_note) {
    let res = new Array();
    let inlinks = this.dv_api.index.links.invMap.get(tfile.path);
    if (inlinks == void 0) {
      return [];
    } else {
      return Array.from(inlinks).map(
        (path) => this.app.vault.fileMap[path]
      ).filter(
        (item) => item
      );
    }
  }
  get_outlinks(tfile = this.current_note) {
    let res = new Array();
    let inlinks = this.dv_api.index.links.map.get(tfile.path);
    if (inlinks == void 0) {
      return [];
    } else {
      return Array.from(inlinks).map(
        (path) => this.app.vault.fileMap[path]
      ).filter(
        (item) => item
      );
    }
  }
  get_links(tfile = this.current_note) {
    let inlinks = this.get_inlinks(tfile);
    let outlinks = this.get_outlinks(tfile);
    for (let link of inlinks) {
      if (!outlinks.includes(link)) {
        outlinks.push(link);
      }
    }
    return outlinks;
  }
  get_same_parent(tfile = this.current_note) {
    var _a;
    let notes = (_a = tfile == null ? void 0 : tfile.parent) == null ? void 0 : _a.children.filter(
      (f) => f.basename
    ).filter(
      (f) => f.extension === "md"
    );
    if (!notes) {
      return [];
    }
    return notes;
  }
  async suggester_notes(tfile = this.current_note) {
    let kv = [
      "\u5F53\u524D\u7B14\u8BB0",
      "\u540C\u7EA7\u76EE\u5F55",
      "\u51FA\u94FE+\u5165\u94FE",
      "\u5165\u94FE",
      "\u51FA\u94FE"
    ];
    let mode2 = await this.suggester(kv, kv);
    if (mode2 === "\u5F53\u524D\u7B14\u8BB0") {
      return [tfile];
    } else if (mode2 === "\u540C\u7EA7\u76EE\u5F55") {
      return this.get_same_parent(tfile);
    } else if (mode2 === "\u51FA\u94FE+\u5165\u94FE") {
      return this.get_links(tfile);
    } else if (mode2 === "\u5165\u94FE") {
      return this.get_inlinks(tfile);
    } else if (mode2 === "\u51FA\u94FE") {
      return this.get_outlinks(tfile);
    } else {
      return [];
    }
  }
  get_first_note(tfile) {
    let res = new Array();
    res.push(tfile);
    let tmp = tfile;
    while (true) {
      let prev = this.get_prev_notes(tmp, this.prev, this.next, true);
      if (prev[0] && !res.includes(prev[1][0])) {
        res.unshift(prev[1][0]);
        tmp = prev[1][0];
      } else {
        break;
      }
    }
    return tmp;
  }
  get_last_note(tfile) {
    let res = new Array();
    res.push(tfile);
    let tmp = tfile;
    while (true) {
      let next = this.get_next_notes(tmp, this.prev, this.next, true);
      if (next[0] && !res.includes(next[1][0])) {
        res.push(next[1][0]);
        tmp = next[1][0];
        console.log(tmp);
      } else {
        break;
      }
    }
    return tmp;
  }
  get_file_chain(tfile = this.current_note, prev = 10, next = 10) {
    var _a, _b;
    let res = Array();
    res.push(tfile);
    let tmp = tfile;
    for (let i = prev; i != 0; i--) {
      console.log(i);
      let meta = this.app.metadataCache.getFileCache(tmp);
      if (!meta) {
        break;
      }
      let name = (_a = meta.frontmatter) == null ? void 0 : _a.PrevNote;
      if (!name) {
        break;
      }
      let note = this.get_tfile(name);
      if (!note) {
        break;
      } else if (res.includes(note)) {
        this.set_frontmatter(note, this.next, "");
        this.set_frontmatter(tmp, this.prev, "");
        break;
      } else {
        res.unshift(note);
        tmp = note;
      }
    }
    tmp = tfile;
    for (let i = next; i != 0; i--) {
      let meta = this.app.metadataCache.getFileCache(tmp);
      if (!meta) {
        break;
      }
      let name = (_b = meta.frontmatter) == null ? void 0 : _b.NextNote;
      if (!name) {
        break;
      }
      let note = this.get_tfile(name);
      if (!note) {
        break;
      } else if (res.includes(note)) {
        this.set_frontmatter(note, this.prev, "");
        this.set_frontmatter(tmp, this.next, "");
        break;
      } else {
        res.push(note);
        tmp = note;
      }
    }
  }
  get_prev_notes(tfile, prev = "PrevNote", next = "NextNote", onlyFrontmatter = true) {
    let res = new Array();
    let notes = this.get_links(tfile);
    let meta = this.app.metadataCache.getFileCache(tfile);
    let flag = false;
    if (meta == null ? void 0 : meta.frontmatter) {
      let name = meta.frontmatter[prev];
      if (name) {
        let note = this.get_tfile(name, notes);
        res.push(note);
        flag = true;
      }
    }
    if (onlyFrontmatter) {
      return [flag, res];
    }
    for (let note of notes) {
      if (res.includes(note)) {
        continue;
      }
      if (!note) {
        continue;
      }
      let meta2 = this.app.metadataCache.getFileCache(note);
      if (meta2 == null ? void 0 : meta2.frontmatter) {
        let name = meta2.frontmatter[next];
        if (this.get_tfile(name, [tfile])) {
          res.push(note);
        }
      }
    }
    return [flag, res];
  }
  get_next_notes(tfile, prev = "PrevNote", next = "NextNote", onlyFrontmatter = true) {
    return this.get_prev_notes(tfile, next, prev, onlyFrontmatter);
  }
  get_neighbors(tfile) {
    let tmp = this.get_prev_notes(tfile, this.prev, this.next, true);
    let pflag = tmp[0];
    let prev = tmp[1];
    let tmp2 = this.get_next_notes(tfile, this.prev, this.next, true);
    let nflag = tmp2[0];
    let next = tmp2[1];
    if (pflag && nflag) {
      return [prev[0], next[0]];
    } else if (pflag) {
      return [prev[0], void 0];
    } else if (nflag) {
      return [void 0, next[0]];
    } else {
      return [void 0, void 0];
    }
  }
  async set_frontmatter(tfile, key, value) {
    await this.app.fileManager.processFrontMatter(tfile, (fm) => {
      console.log(`${tfile.basename}---${key}---${value}`);
      fm[key] = value;
    });
  }
  get_frontmatter(tfile, key) {
    let meta = this.app.metadataCache.getFileCache(tfile);
    if (meta == null ? void 0 : meta.frontmatter) {
      return meta.frontmatter[key];
    }
  }
  pop_node(tfile) {
    let neighbor = this.get_neighbors(tfile);
    if (neighbor[0] != null && neighbor[1] != null) {
      this.set_frontmatter(neighbor[0], this.next, `[[${neighbor[1].basename}]]`);
      this.set_frontmatter(neighbor[1], this.prev, `[[${neighbor[0].basename}]]`);
    } else if (neighbor[0] != null) {
      this.set_frontmatter(neighbor[0], this.next, ``);
    } else if (neighbor[1] != null) {
      this.set_frontmatter(neighbor[1], this.prev, ``);
    }
  }
  insert_node_as_head(tfile, anchor) {
    if (head == tfile) {
      return;
    }
    let head = this.get_first_note(anchor);
    this.set_frontmatter(tfile, this.next, `[[${head.basename}]]`);
    this.set_frontmatter(head, this.prev, `[[${tfile.basename}]]`);
  }
  insert_node_as_tail(tfile, anchor) {
    let tail = this.get_last_note(anchor);
    if (tfile == tail) {
      return;
    }
    this.set_frontmatter(tfile, this.prev, `[[${tail.basename}]]`);
    this.set_frontmatter(tail, this.next, `[[${tfile.basename}]]`);
  }
  insert_node_after(tfile, anchor) {
    let next = this.get_next_notes(anchor, this.prev, this.next, true);
    if (next[0] && next[1][0] != tfile && next[1][0] != anchor) {
      this.set_frontmatter(next[1][0], this.prev, `[[${tfile.basename}]]`);
      this.set_frontmatter(tfile, this.next, `[[${next[1][0].basename}]]`);
    }
    this.set_frontmatter(tfile, this.prev, `[[${anchor.basename}]]`);
    this.set_frontmatter(anchor, this.next, `[[${tfile.basename}]]`);
  }
  insert_node_before(tfile, anchor) {
    let prev = this.get_prev_notes(anchor, this.prev, this.next, true);
    if (prev[0] && prev[1][0] != tfile && prev[1][0] != anchor) {
      this.set_frontmatter(prev[1][0], this.next, `[[${tfile.basename}]]`);
      this.set_frontmatter(tfile, this.prev, `[[${prev[1][0].basename}]]`);
    }
    this.set_frontmatter(tfile, this.next, `[[${anchor.basename}]]`);
    this.set_frontmatter(anchor, this.prev, `[[${tfile.basename}]]`);
  }
  async rechain_folder(tfolder = null, mode2 = "suggester") {
    let notes = this.get_same_parent();
    let files = await this.suggester_sort(notes);
    for (let i = 0; i < files.length - 1; i++) {
      if (!(this.get_frontmatter(files[i], this.next) === `[[${files[i + 1].basename}]]`)) {
        this.set_frontmatter(files[i], this.next, `[[${files[i + 1].basename}]]`);
      }
      if (!(this.get_frontmatter(files[i + 1], this.prev) === `[[${files[i].basename}]]`)) {
        this.set_frontmatter(files[i + 1], this.prev, `[[${files[i].basename}]]`);
      }
    }
  }
  sort_tfiles(files, field) {
    if (typeof field === "string") {
      if (field.localeCompare("name") == 0) {
        return files.sort(
          (a, b) => a.name.localeCompare(b.name)
        );
      } else if (field.localeCompare("mtime") == 0) {
        return files.sort(
          (a, b) => a.stat.mtime - b.stat.mtime
        );
      } else if (field.localeCompare("ctime") == 0) {
        return files.sort(
          (a, b) => a.stat.ctime - b.stat.ctime
        );
      }
      return files;
    } else if (typeof field === "object") {
      if (field instanceof Array) {
        let nfiles = this.sort_tfiles(files, field[0]);
        if (field.length >= 2) {
          if (field[1] === "x") {
            return nfiles.reverse();
          }
        }
        return nfiles;
      }
    }
    return files;
  }
  sort_tfiles_by_chain(files) {
  }
  sort_tfiles_by_field(files, field) {
    let res = files.sort(
      (a, b) => {
        let ameta = this.app.metadataCache.getFileCache(a).frontmatter;
        let bmeta = this.app.metadataCache.getFileCache(b).frontmatter;
        if (!ameta && !bmeta) {
          return 0;
        } else if (!ameta) {
          return bmeta[field];
        } else if (!bmeta) {
          return ameta[mode];
        } else {
          return ameta[field] - bmeta[field];
        }
      }
    );
    return res;
  }
  async suggester_sort(tfiles) {
    if (!tfiles) {
      return [];
    }
    if (tfiles.length == 0) {
      return [];
    }
    ;
    let kv = {
      "name": "name",
      "ctime": "ctime",
      "mtime": "mtime",
      "name \u5012\u5E8F": ["name", "x"],
      "ctime \u5012\u5E8F": ["ctime", "x"],
      "mtime \u5012\u5E8F": ["mtime", "x"]
    };
    let field = await this.suggester(
      Object.keys(kv),
      Object.values(kv)
    );
    return this.sort_tfiles(tfiles, field);
  }
};
var ZigHolding = class extends import_obsidian.Plugin {
  async onload() {
    this.chain = new NoteChain(this.app);
    this.editor = new ZigEditor(this.app);
    this.app.zig = this;
    await this.loadSettings();
    this.dataview = await this.app.plugins.getPlugin(
      "dataview"
    );
    this.templater = await this.app.plugins.getPlugin(
      "templater-obsidian"
    );
    this.addCommand({
      id: "chain_insert_node",
      name: "Chain-->\u63D2\u5165\u8282\u70B9",
      callback: () => {
        this.chain_insert_node();
      }
    });
    this.addCommand({
      id: "chain_set_seq_note",
      name: "Chian-->\u91CD\u7F6E\u5F53\u524D\u7B14\u8BB0\u6240\u5728\u76EE\u5F55\u94FE\u6761\uFF0C\u4F1A\u6E05\u9664\u4F60\u7684\u8BBE\u7F6E\uFF0C\u614E\u7528\uFF01",
      callback: () => {
        this.chain.rechain_folder();
      }
    });
    this.addCommand({
      id: "open_notes_in_same_folder",
      name: "Open-->\u6253\u5F00\u76EE\u5F55\u7B14\u8BB0",
      callback: () => {
        this.open_notes_in_same_folder();
      }
    });
    this.addCommand({
      id: "open_note_chain",
      name: "Chain-->\u6253\u5F00\u7B14\u8BB0\u94FE\u6761",
      callback: () => {
        this.open_note_chain();
      }
    });
    this.addCommand({
      id: "clean_clear_inlinks",
      name: "\u6574\u7406-->\u6E05\u7406\u5165\u94FE",
      callback: () => {
        this.clear_inlinks();
      }
    });
    this.addSettingTab(new SampleSettingTab(this.app, this));
    console.log("Zig-Holding:regeister ufunc_on_file_open");
    this.app.workspace.on("file-open", this.ufunc_on_file_open);
  }
  onunload() {
    console.log("Zig-Holding:unregeister ufunc_on_file_open");
    this.app.workspace.off("file-open", this.ufunc_on_file_open);
  }
  async ufunc_on_file_open(file) {
    let zh = await app.plugins.getPlugin("zig-holding");
    if (!zh) {
      return;
    }
    if (zh.settings.refreshDataView) {
      zh.app.commands.executeCommandById(
        "dataview:dataview-force-refresh-views"
      );
    }
    if (zh.settings.refreshTasks) {
      let target = await app.plugins.getPlugin("obsidian-tasks-plugin");
      target.cache.notifySubscribers();
    }
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async clear_inlinks(tfile = this.chain.current_note, mode2 = "suggester") {
    let notes = this.chain.get_inlinks(tfile);
    if (notes.length) {
      if (mode2 === "suggester") {
        mode2 = await this.suggester(
          ["\u5220\u9664\u94FE\u63A5", "\u5220\u9664\u6BB5\u843D"],
          ["link", "para"]
        );
      }
      let reg = this.editor.regexp_link(tfile, mode2);
      if (reg) {
        for (let note of notes) {
          this.editor.replace(note, reg, "");
        }
      }
    }
  }
  get_tfile(path) {
    let files = app.vault.getMarkdownFiles();
    if (files.includes(path)) {
      return files[path];
    }
    for (let file of files) {
      if (file.name.toLowerCase().localeCompare(path.toLowerCase()) == 0) {
        return file;
      }
      if (file.basename.toLowerCase().localeCompare(path.toLowerCase()) == 0) {
        return file;
      }
      if (`[[${file.basename.toLowerCase()}]]`.localeCompare(path.toLowerCase()) == 0) {
        return file;
      }
    }
    return null;
  }
  get_tfile_config(tfile, suffix = "_config") {
    return this.get_tfile(tfile.basename + suffix);
  }
  async select_value_of_list(targets, prompt2 = null) {
    const target = await this.suggester(
      targets,
      targets,
      false,
      prompt2
    );
    return target;
  }
  async chain_insert_node() {
    let curr = app.workspace.getActiveFile();
    let filteredFiles = app.vault.getMarkdownFiles().sort(
      (a, b) => b.stat.mtime - a.stat.mtime
    );
    if (!this.settings.allFiles) {
      filteredFiles = filteredFiles.filter(
        (file) => file != curr && file.parent == curr.parent
      );
    } else {
      filteredFiles = filteredFiles.filter(
        (file) => file != curr
      );
    }
    const note = await this.suggester(
      (file) => this.tfile_to_string(
        file,
        this.settings.showLink ? ["PrevNote", "NextNote"] : [],
        "			\u26A1  "
      ),
      filteredFiles
    );
    if (!note) {
      return;
    }
    let mode2 = await this.select_value_of_list([
      "insert_node_after",
      "insert_node_before",
      "insert_node_as_head",
      "insert_node_as_tail"
    ], prompt = "Select Node Insert Mode.");
    if (!mode2) {
      return;
    }
    console.log(typeof mode2, mode2);
    if (this.settings.popFirst) {
      this.chain.pop_node(curr);
    }
    if (mode2 === "insert_node_as_head") {
      this.chain.insert_node_as_head(curr, note);
    } else if (mode2 === "insert_node_as_tail") {
      this.chain.insert_node_as_tail(curr, note);
    } else if (mode2 === "insert_node_before") {
      this.chain.insert_node_before(curr, note);
    } else if (mode2 === "insert_node_after") {
      this.chain.insert_node_after(curr, note);
    } else {
      return;
    }
    if (this.settings.openLink) {
      if (note) {
        if (this.settings.newTab) {
          this.app.workspace.getLeaf(true).openFile(note);
        } else {
          this.app.workspace.activeLeaf.openFile(note);
        }
      }
    }
  }
  tfile_to_string(tfile, fields, seq) {
    let meta = this.app.metadataCache.getFileCache(tfile);
    let items = new Array();
    items.push(tfile.basename);
    for (let field of fields) {
      try {
        items.push(meta.frontmatter[field]);
      } catch (error) {
        items.push("-");
      }
    }
    return items.join(seq);
  }
  async open_notes_in_same_folder() {
    let curr = this.app.workspace.getActiveFile();
    const filteredFiles_ = this.app.vault.getMarkdownFiles().filter(
      (file) => {
        var _a;
        return file != curr | ((_a = this.settings) == null ? void 0 : _a.withSelf) && file.path.startsWith(curr.parent.path);
      }
    );
    let filteredFiles = this.chain.sort_tfiles(
      filteredFiles_,
      this.settings.field
    );
    const note = await this.suggester(
      (file) => file.path.slice(curr.parent.path.length + 1).slice(0, -3),
      filteredFiles
    );
    if (note) {
      if (this.settings.newTab) {
        app.workspace.getLeaf(true).openFile(note);
      } else {
        app.workspace.activeLeaf.openFile(note);
      }
    }
  }
  get suggester() {
    return get_tp_func(this.app, "tp.system.suggester");
  }
  get_file_chain(curr = null, prev = 10, next = 10, sameFolder = false) {
    var _a, _b;
    if (curr === null) {
      curr = this.app.workspace.getActiveFile();
    }
    let res = Array();
    res.push(curr);
    let tmp = curr;
    for (let i = prev; i != 0; i--) {
      let meta = this.app.metadataCache.getFileCache(tmp);
      if (!meta) {
        break;
      }
      let name = (_a = meta.frontmatter) == null ? void 0 : _a.PrevNote;
      if (!name) {
        break;
      }
      let note = this.get_tfile(name);
      if (!note | res.includes(note)) {
        break;
      } else {
        res.unshift(note);
        tmp = note;
      }
    }
    tmp = curr;
    for (let i = next; i != 0; i--) {
      let meta = this.app.metadataCache.getFileCache(tmp);
      if (!meta) {
        break;
      }
      let name = (_b = meta.frontmatter) == null ? void 0 : _b.NextNote;
      if (!name) {
        break;
      }
      let note = this.get_tfile(name);
      if (!note | res.includes(note)) {
        break;
      } else {
        res.push(note);
        tmp = note;
      }
    }
    if (sameFolder) {
      res.push(null);
      let afiles = this.app.vault.getMarkdownFiles();
      for (let f of afiles) {
        if (f.parent == (curr == null ? void 0 : curr.parent)) {
          if (!res.includes(f)) {
            res.push(f);
          }
        }
      }
      res = res.filter(
        (file) => file === null | (file == null ? void 0 : file.path.startsWith(curr.parent.path))
      );
    }
    return res;
  }
  async open_note_chain() {
    let curr = this.app.workspace.getActiveFile();
    let files = this.get_file_chain(
      curr,
      Number(this.settings.PrevChain),
      Number(this.settings.NextChain),
      this.settings.sameFolder
    );
    const note = await this.suggester(
      (file) => {
        if (!file) {
          return "-----\u{1F4C2}-----";
        } else if (file == curr) {
          return `\u{1F3E0} ${curr.basename}`;
        } else {
          return file.path.slice(curr.parent.path.length + 1).slice(0, -3);
        }
      },
      files
    );
    if (note) {
      if (this.settings.newTab) {
        this.app.workspace.getLeaf(true).openFile(note);
      } else {
        this.app.workspace.activeLeaf.openFile(note);
      }
    }
  }
};
var SampleSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h1", { text: "Zig Holding" });
    containerEl.createEl("h3", { text: "Switch Note" });
    new import_obsidian.Setting(containerEl).setName("newTab").setDesc("\u662F\u5426\u5728\u65B0\u6807\u7B7E\u4E2D\u6253\u5F00\u7B14\u8BB0?").addToggle(
      (text) => text.setValue(this.plugin.settings.newTab).onChange(async (value) => {
        this.plugin.settings.newTab = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("withSelf").setDesc("\u662F\u5426\u663E\u793A\u5F53\u524D\u7B14\u8BB0?").addToggle(
      (text) => text.setValue(this.plugin.settings.withSelf).onChange(async (value) => {
        this.plugin.settings.withSelf = value;
        await this.plugin.saveSettings();
      })
    );
    containerEl.createEl("h4", { text: "Open note in same folder" });
    new import_obsidian.Setting(containerEl).setName("reverse").setDesc("\u662F\u5426\u9006\u5411\u6392\u5E8F?").addToggle(
      (text) => text.setValue(this.plugin.settings.reverse).onChange(async (value) => {
        this.plugin.settings.reverse = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("field").setDesc("\u7B14\u8BB0\u6392\u5E8F\u5B57\u6BB5\uFF1Amtime\uFF0C\u4FEE\u6539\u65F6\u95F4\uFF1Bctime\uFF0C\u521B\u5EFA\u65F6\u95F4\uFF1Bname,\u6587\u4EF6\u540D\uFF1B\u6216\u5176\u5B83\u5143\u6570\u636E\u5B57\u6BB5\u3002").addText((text) => text.setValue(this.plugin.settings.field).onChange(async (value) => {
      this.plugin.settings.field = value;
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("h4", { text: "Open note chain" });
    new import_obsidian.Setting(containerEl).setName("PrevChain").setDesc("\u524D\u7F6E\u7B14\u8BB0\u6570\u76EE").addText((text) => text.setValue(this.plugin.settings.PrevChain).onChange(async (value) => {
      this.plugin.settings.PrevChain = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("NextChain").setDesc("\u540E\u7F6E\u7B14\u8BB0\u6570\u76EE").addText((text) => text.setValue(this.plugin.settings.NextChain).onChange(async (value) => {
      this.plugin.settings.NextChain = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("sameFolder").setDesc("\u4EC5\u663E\u793A\u5F53\u524D\u6587\u4EF6\u5939\u4E2D\u94FE\u8DEF\uFF0C\u540C\u65F6\u5C55\u793A\u4E0D\u5728\u94FE\u8DEF\u7684\u6587\u4EF6").addToggle(
      (text) => text.setValue(this.plugin.settings.sameFolder).onChange(async (value) => {
        this.plugin.settings.sameFolder = value;
        await this.plugin.saveSettings();
      })
    );
    containerEl.createEl("h3", { text: "Note Chain" });
    new import_obsidian.Setting(containerEl).setName("showLink").setDesc("\u662F\u5426\u9009\u62E9\u65F6\u663E\u793A\u7B14\u8BB0\u94FE\u63A5").addToggle(
      (text) => text.setValue(this.plugin.settings.showLink).onChange(async (value) => {
        this.plugin.settings.showLink = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("popFirst").setDesc("\u63D2\u5165\u524D\u94FE\u63A5\u5F53\u524D\u7B14\u8BB0\u524D\u540E\u7F6E\u7B14\u8BB0").addToggle(
      (text) => text.setValue(this.plugin.settings.popFirst).onChange(async (value) => {
        this.plugin.settings.popFirst = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("openLink").setDesc("\u9009\u62E9\u540E\u662F\u5426\u6253\u5F00\u7B14\u8BB0").addToggle(
      (text) => text.setValue(this.plugin.settings.openLink).onChange(async (value) => {
        this.plugin.settings.openLink = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("allFiles").setDesc("\u662F\u5426\u4ECE\u6240\u6709\u7B14\u8BB0\u4E2D\u9009\u62E9").addToggle(
      (text) => text.setValue(this.plugin.settings.allFiles).onChange(async (value) => {
        this.plugin.settings.allFiles = value;
        await this.plugin.saveSettings();
      })
    );
    containerEl.createEl("h3", { text: "\u521D\u59CB\u5316" });
    new import_obsidian.Setting(containerEl).setName("refreshDataView").setDesc("\u6253\u5F00\u65B0\u7B14\u8BB0\u65F6\u5237\u65B0Dataview\uFF1F").addToggle(
      (text) => text.setValue(this.plugin.settings.refreshDataView).onChange(async (value) => {
        this.plugin.settings.refreshDataView = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("refreshTasks").setDesc("\u6253\u5F00\u65B0\u7B14\u8BB0\u65F6\u5237\u65B0Tasks\uFF1F").addToggle(
      (text) => text.setValue(this.plugin.settings.refreshTasks).onChange(async (value) => {
        this.plugin.settings.refreshTasks = value;
        await this.plugin.saveSettings();
      })
    );
  }
};
//# sourceMappingURL=data:application/json;base64,
