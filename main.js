/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/utils.ts
var utils_exports = {};
__export(utils_exports, {
  array_prefix_id: () => array_prefix_id,
  check_value: () => check_value,
  concat_array: () => concat_array,
  get_plugins: () => get_plugins,
  get_tp_func: () => get_tp_func,
  set_prototype: () => set_prototype,
  sleep: () => sleep
});
function get_plugins(app2, name) {
}
function array_prefix_id(items, offset = 1) {
  let res = new Array();
  for (let i = 0; i < items.length; i++) {
    res.push(`${i + offset} ${items[i]}`);
  }
  return res;
}
function concat_array(items) {
  if (items == null) {
    return [];
  }
  if (typeof items === "string") {
    return [items];
  }
  if (!(items instanceof Array)) {
    return [items];
  }
  let res = [];
  for (let item of items) {
    if (typeof item === "string") {
      res.push(item);
    } else if (item instanceof Array) {
      res = res.concat(this.concat_array(item));
    } else {
      res.push(item);
    }
  }
  return res;
}
function sleep(ms) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}
async function check_value(t, k, v, dt, T) {
  let i = 0;
  while (t[k] == null || !(t[k] === v)) {
    await sleep(dt);
    i = dt + dt;
    if (i > T) {
      break;
    }
  }
  if (t[k] && t[k] === v) {
    return true;
  } else {
    return false;
  }
}
function get_tp_func(app2, target) {
  let templater = app2.plugins.getPlugin(
    "templater-obsidian"
  );
  let items = target.split(".");
  if (items[0].localeCompare("tp") != 0 || items.length != 3) {
    return void 0;
  }
  let modules = templater.templater.functions_generator.internal_functions.modules_array.filter(
    (item) => item.name.localeCompare(items[1]) == 0
  );
  if (modules.length == 0) {
    return void 0;
  }
  return modules[0].static_functions.get(items[2]);
}
function set_prototype(t, e) {
  let r = Object.keys(e).map((i) => set_prototype_on(t, i, e[i]));
  return r.length === 1 ? r[0] : function() {
    r.forEach((i) => i());
  };
}
function set_prototype_on(prototype, name, func) {
  let org_func = prototype[name], isOwnProperty = prototype.hasOwnProperty(name), final_func = func(org_func);
  if (org_func) {
    Object.setPrototypeOf(final_func, org_func);
  }
  Object.setPrototypeOf(a, final_func);
  prototype[name] = a;
  return s;
  function a(...d) {
    if (final_func === org_func && prototype[name] === a) {
      s();
    }
    return final_func.apply(this, d);
  }
  function s() {
    if (prototype[name] === a) {
      if (isOwnProperty) {
        prototype[name] = org_func;
      } else {
        delete prototype[name];
      }
    }
    if (final_func !== org_func) {
      final_func = org_func;
      Object.setPrototypeOf(a, org_func || Function);
    }
  }
}
var init_utils = __esm({
  "src/utils.ts"() {
  }
});

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => NoteChainPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian3 = require("obsidian");

// src/NCEditor.ts
var NCEditor = class {
  constructor(app2) {
    this.app = app2;
  }
  async set_frontmatter(tfile, key, value) {
    let prev = this.get_frontmatter(tfile, key);
    if (prev === value) {
      return;
    }
    await this.app.fileManager.processFrontMatter(tfile, (fm) => {
      console.log(`${tfile.basename}---${key}---${value}`);
      fm[key] = value;
    });
  }
  get_frontmatter(tfile, key) {
    try {
      if (!tfile) {
        return null;
      }
      let meta = this.app.metadataCache.getFileCache(tfile);
      if (meta == null ? void 0 : meta.frontmatter) {
        return meta.frontmatter[key];
      }
    } catch (error) {
      console.log("get_frontmatter");
      console.log(tfile);
      console.log(error);
      return null;
    }
  }
  regexp_link(tfile, mode) {
    if (mode === "link") {
      return new RegExp(`\\[\\[${tfile.basename}\\|?.*\\]\\]`, "g");
    }
    if (mode === "para") {
      return new RegExp(`.*\\[\\[${tfile.basename}\\|?.*\\]\\].*`, "g");
    }
  }
  async replace(tfile, regex, target) {
    if (typeof regex === "string") {
      await this.app.vault.process(tfile, (data) => {
        if (data.indexOf(regex) > -1) {
          console.log("Replace: ", tfile.path);
          return data.replace(regex, target);
        }
        return data;
      });
    } else if (regex instanceof RegExp) {
      await this.app.vault.process(tfile, (data) => {
        if (data.match(regex)) {
          console.log("Replace: ", tfile.path);
          return data.replace(regex, target);
        }
        return data;
      });
    }
  }
};

// src/NoteChain.ts
var import_obsidian = require("obsidian");
init_utils();
var NoteChain = class {
  constructor(plugin, editor, prev = "PrevNote", next = "NextNote") {
    this.plugin = plugin;
    this.app = plugin.app;
    this.editor = new NCEditor(this.app);
    this.prev = prev;
    this.next = next;
    this.init_children();
  }
  init_children() {
    this.children = {};
    for (let f of this.get_all_folders()) {
      this.children[f.path] = this.sort_tfiles_by_chain(f.children);
    }
  }
  get tp_find_tfile() {
    return get_tp_func(this.app, "tp.file.find_tfile");
  }
  get tp_suggester() {
    return get_tp_func(this.app, "tp.system.suggester");
  }
  get tp_prompt() {
    return get_tp_func(this.app, "tp.system.prompt");
  }
  get_all_folders(sort_mode = "") {
    return this.app.vault.getAllFolders();
  }
  get_all_tfiles(sort_mode = "") {
    let files = this.app.vault.getMarkdownFiles();
    if (!(sort_mode === "")) {
      this.sort_tfiles(files, sort_mode = sort_mode);
    }
    return files;
  }
  sort_folders_by_mtime(folders, reverse = true) {
    function ufunc(f) {
      return Math.max(
        ...f.children.filter((f2) => f2.basename).map((f2) => f2.stat.mtime)
      );
    }
    let res = folders.sort((a, b) => ufunc(a) - ufunc(b));
    if (reverse) {
      res = res.reverse();
    }
    return res;
  }
  async cmd_move_file_to_another_folder(tfile = this.current_note) {
    if (tfile == null) {
      return;
    }
    let folders = this.get_all_folders();
    folders = this.sort_folders_by_mtime(
      folders
    ).filter((f) => f != tfile.parent);
    if (tfile.extension === "md") {
      folders = folders.filter((f) => this.filter_user_ignore(f));
    }
    try {
      let folder = await this.tp_suggester((f) => f.path, folders);
      let dst = folder.path + "/" + tfile.basename + "." + tfile.extension;
      await this.app.fileManager.renameFile(tfile, dst);
    } catch (error) {
    }
  }
  filter_user_ignore(note) {
    if (!(this.app.vault.config.attachmentFolderPath === "./")) {
      if (note.path.startsWith(
        this.app.vault.config.attachmentFolderPath
      )) {
        return false;
      }
    }
    if (this.app.vault.config.userIgnoreFilters) {
      for (let x of this.app.vault.config.userIgnoreFilters) {
        if (note.path.startsWith(x)) {
          return false;
        }
      }
    }
    return true;
  }
  async sugguster_note() {
    let notes = this.sort_tfiles(
      this.app.vault.getFiles(),
      ["mtime", "x"]
    ).filter((f) => this.filter_user_ignore(f));
    try {
      let note = await this.tp_suggester((f) => f.path, notes);
      return note;
    } catch (error) {
      return null;
    }
  }
  open_note(tfile, new_tab = false, revealFolder = true) {
    if (tfile) {
      if (this.app.workspace.activeLeaf.pinned || new_tab) {
        this.app.workspace.getLeaf(true).openFile(tfile);
      } else {
        this.app.workspace.activeLeaf.openFile(tfile);
      }
      if (revealFolder) {
        this.plugin.explorer.file_explorer.revealInFolder(tfile);
      }
    }
  }
  async sugguster_open_note() {
    try {
      let note = await this.sugguster_note();
      this.open_note(note);
    } catch (error) {
    }
  }
  get_tfile(path) {
    let name = path.split("|")[0].replace("[[", "").replace("]]", "");
    return this.tp_find_tfile(name);
  }
  get current_note() {
    return this.app.workspace.getActiveFile();
  }
  get_inlinks(tfile = this.current_note) {
    if (tfile == null) {
      return [];
    }
    let res = new Array();
    let dv_api = this.app.plugins.getPlugin("dataview");
    let inlinks = dv_api.index.links.invMap.get(tfile.path);
    if (inlinks == void 0) {
      return [];
    } else {
      return Array.from(inlinks).map(
        (path) => this.app.vault.fileMap[path]
      ).filter(
        (item) => item
      );
    }
  }
  get_outlinks(tfile = this.current_note) {
    if (tfile == null) {
      return [];
    }
    if (this.app instanceof import_obsidian.App) {
      if (this.app.plugins) {
      }
    }
    let dv_api = this.app.plugins.getPlugin("dataview");
    let inlinks = dv_api.index.links.map.get(tfile.path);
    if (inlinks == void 0) {
      return [];
    } else {
      return Array.from(inlinks).map(
        (path) => this.app.vault.fileMap[path]
      ).filter(
        (item) => item
      );
    }
  }
  get_links(tfile = this.current_note) {
    let inlinks = this.get_inlinks(tfile);
    let outlinks = this.get_outlinks(tfile);
    for (let link of inlinks) {
      if (!outlinks.includes(link)) {
        outlinks.push(link);
      }
    }
    return outlinks;
  }
  get_brothers(tfile = this.current_note) {
    if (tfile && tfile.parent) {
      return this.get_tfiles_of_folder(tfile.parent, false);
    } else {
      return [];
    }
  }
  get_uncles(tfile) {
    if (tfile && tfile.parent && tfile.parent.parent) {
      let folder = tfile.parent.parent;
      return folder.children.filter(
        (x) => x instanceof import_obsidian.TFile
      );
    }
    return [];
  }
  get_tfiles_of_folder(tfolder, with_children = false) {
    if (tfolder == null) {
      return [];
    }
    let notes = [];
    for (let c of tfolder.children) {
      if (c instanceof import_obsidian.TFile && c.extension === "md") {
        notes.push(c);
      } else if (c instanceof import_obsidian.TFolder && with_children) {
        let tmp = this.get_tfiles_of_folder(c);
        for (let x of tmp) {
          notes.push(x);
        }
      }
    }
    return notes;
  }
  indexOfFolder(tfile, tfiles) {
    let fnote = this.tp_find_tfile(tfile.name + ".md");
    if (!fnote) {
      return -1;
    }
    let msg = this.plugin.editor.get_frontmatter(
      fnote,
      "FolderPrevNote"
    );
    if (!msg) {
      return -1;
    }
    let items = msg.split("]]+");
    let anchor = this.get_tfile(items[0].slice(2));
    if (!anchor) {
      return -1;
    }
    let idx = tfiles.indexOf(anchor);
    if (items.length == 2) {
      idx = idx + parseFloat(items[1]);
    }
    return idx;
  }
  parse_item(item) {
    var args = [].slice.call(arguments).slice(1);
    let kwargs = {};
    if (args.length == 1) {
      kwargs = args[0];
    }
    let seq = kwargs["seq"];
    if (seq != null) {
      return `${seq} -> ${item}`;
    }
    return item;
  }
  tfile_to_string(tfile) {
    let curr = this.current_note;
    let msg = "";
    if (tfile.parent == curr.parent) {
      msg = tfile.basename;
    } else {
      msg = tfile.path;
    }
    if (tfile == this.current_note) {
      return `\u{1F3E0} ${msg}`;
    } else {
      return msg;
    }
  }
  parse_items(items) {
    var args = [].slice.call(arguments).slice(1);
    let kwargs = {};
    if (args.length == 1) {
      kwargs = args[0];
    }
    let res = [];
    let i = 0;
    while (i < items.length) {
      if (kwargs["seq"]) {
        res.push(this.parse_item(items[i], { "seq": i + 1 }));
      } else {
        res.push(this.parse_item(items[i]));
      }
      i++;
    }
    return res;
  }
  async suggester_notes(tfile = this.current_note, curr_first = true, smode = "") {
    if (tfile) {
      tfile == this.current_note;
    }
    let kv = [
      "\u540C\u7EA7\u7B14\u8BB0",
      "\u7B14\u8BB0\u94FE\u6761",
      "\u4E0A\u7EA7\u7B14\u8BB0",
      "\u540C\u7EA7\u7B14\u8BB0+\u5B50\u76EE\u5F55",
      "\u51FA\u94FE+\u5165\u94FE",
      "\u5165\u94FE",
      "\u51FA\u94FE",
      "\u6240\u6709\u7B14\u8BB0",
      "recent-files-obsidian"
    ];
    if (curr_first) {
      kv.unshift("\u5F53\u524D\u7B14\u8BB0");
    } else {
      kv.push("\u5F53\u524D\u7B14\u8BB0");
    }
    let kvs = [];
    let i = 1;
    for (let x of kv) {
      kvs.push(`${i++} ${x}`);
    }
    let mode = "";
    if (kv.contains(smode)) {
      mode = smode;
    } else {
      mode = await this.tp_suggester(kvs, kv);
    }
    if (mode === "\u5F53\u524D\u7B14\u8BB0") {
      return [tfile];
    } else if (mode === "\u540C\u7EA7\u7B14\u8BB0") {
      return this.get_brothers(tfile);
    } else if (mode === "\u540C\u7EA7\u7B14\u8BB0+\u5B50\u76EE\u5F55") {
      return this.get_tfiles_of_folder(tfile == null ? void 0 : tfile.parent, true);
    } else if (mode === "\u51FA\u94FE+\u5165\u94FE") {
      return this.get_links(tfile);
    } else if (mode === "\u5165\u94FE") {
      return this.get_inlinks(tfile);
    } else if (mode === "\u51FA\u94FE") {
      return this.get_outlinks(tfile);
    } else if (mode === "\u6240\u6709\u7B14\u8BB0") {
      return this.get_all_tfiles();
    } else if (mode === "recent-files-obsidian") {
      let r = this.app.plugins.getPlugin("recent-files-obsidian");
      if (!r) {
        return [];
      }
      return Object.values(
        r.data.recentFiles
      ).map(
        (f) => this.app.vault.fileMap[f.path]
      ).filter((f) => f);
    } else if (mode === "\u4E0A\u7EA7\u7B14\u8BB0") {
      return this.get_uncles(tfile);
    } else if (mode === "\u7B14\u8BB0\u94FE\u6761") {
      return this.get_chain(
        tfile,
        Number(this.plugin.settings.PrevChain),
        Number(this.plugin.settings.NextChain)
      );
    } else {
      return [];
    }
  }
  // Chain
  get_prev_note(tfile = this.current_note) {
    if (!tfile) {
      return;
    }
    if (tfile.deleted) {
      let tfiles = this.app.vault.getMarkdownFiles();
      tfiles.filter((f) => `[[${tfile.basename}]]` === app.nc.editor.get_frontmatter(f, "NextNote"));
      tfiles = tfiles.filter((f) => `[[${tfile.basename}]]` === this.editor.get_frontmatter(f, this.next));
      if (tfiles.length > 0) {
        return tfiles[0];
      } else {
        return null;
      }
    } else {
      let name = this.editor.get_frontmatter(tfile, this.prev);
      if (!name) {
        return null;
      }
      let note = this.get_tfile(name);
      return note ? note : null;
    }
  }
  open_prev_notes(tfile = this.current_note) {
    let note = this.get_prev_note(tfile);
    this.open_note(note);
  }
  get_next_note(tfile = this.current_note) {
    if (!tfile) {
      return null;
    }
    if (tfile.deleted) {
      let tfiles = this.app.vault.getMarkdownFiles();
      tfiles = tfiles.filter((f) => `[[${tfile.basename}]]` === this.editor.get_frontmatter(f, this.prev));
      if (tfiles.length > 0) {
        return tfiles[0];
      } else {
        return null;
      }
    } else {
      let name = this.editor.get_frontmatter(tfile, this.next);
      if (!name) {
        return null;
      }
      let note = this.get_tfile(name);
      return note ? note : null;
    }
  }
  open_next_notes(tfile = this.current_note) {
    let note = this.get_next_note(tfile);
    this.open_note(note);
  }
  get_chain(tfile = this.current_note, prev = 10, next = 10, with_self = true) {
    if (tfile == null) {
      return [];
    }
    let res = new Array();
    if (with_self) {
      res.push(tfile);
    }
    let tmp = tfile;
    for (let i = prev; i != 0; i--) {
      let note = this.get_prev_note(tmp);
      if (!note) {
        break;
      } else if (res.includes(note)) {
        this.editor.set_frontmatter(note, this.next, "");
        this.editor.set_frontmatter(tmp, this.prev, "");
        break;
      } else {
        res.unshift(note);
        tmp = note;
      }
    }
    tmp = tfile;
    for (let i = next; i != 0; i--) {
      let note = this.get_next_note(tmp);
      if (!note) {
        break;
      } else if (res.includes(note)) {
        this.editor.set_frontmatter(note, this.prev, "");
        this.editor.set_frontmatter(tmp, this.next, "");
        break;
      } else {
        res.push(note);
        tmp = note;
      }
    }
    return res;
  }
  get_first_note(tfile = this.current_note) {
    let notes = this.get_chain(tfile, -1, 0, false);
    if (notes.length > 0) {
      return notes[0];
    } else {
      return null;
    }
  }
  get_last_note(tfile = this.current_note) {
    let notes = this.get_chain(tfile, 0, -1, false);
    if (notes.length > 0) {
      return notes[notes.length - 1];
    } else {
      return null;
    }
  }
  get_neighbors(tfile = this.current_note) {
    return [
      this.get_prev_note(tfile),
      this.get_next_note(tfile)
    ];
  }
  async chain_set_prev(tfile, prev) {
    if (tfile == null || tfile == prev) {
      return;
    }
    this.plugin.console_log("chain_set_prev:", tfile.basename, prev == null ? void 0 : prev.basename);
    if (prev == null) {
      await this.editor.set_frontmatter(
        tfile,
        this.prev,
        ""
      );
    } else {
      await this.editor.set_frontmatter(
        tfile,
        this.prev,
        `[[${prev.basename}]]`
      );
    }
  }
  async chain_set_next(tfile, next) {
    if (tfile == null || tfile == next) {
      return;
    }
    this.plugin.console_log("chain_set_next:", tfile.basename, next == null ? void 0 : next.basename);
    if (next == null) {
      await this.editor.set_frontmatter(
        tfile,
        this.next,
        ""
      );
    } else {
      await this.editor.set_frontmatter(
        tfile,
        this.next,
        `[[${next.basename}]]`
      );
    }
  }
  async chain_set_prev_next(prev, next) {
    await this.chain_set_prev(next, prev);
    await this.chain_set_next(prev, next);
  }
  async chain_concat_tfiles(tfiles) {
    let prev = this.get_prev_note(tfiles[0]);
    if (tfiles.contains(prev)) {
      await this.chain_set_prev(tfiles[0], null);
    }
    let next = this.get_next_note(tfiles[tfiles.length - 1]);
    if (tfiles.contains(next)) {
      await this.chain_set_next(tfiles[tfiles.length - 1], null);
    }
    for (let i = 0; i < tfiles.length - 1; i++) {
      await this.chain_set_prev_next(tfiles[i], tfiles[i + 1]);
    }
  }
  async chain_pop_node(tfile) {
    let notes = this.get_neighbors(tfile);
    await this.chain_set_prev_next(notes[0], notes[1]);
  }
  async chain_insert_node_as_head(tfile, anchor) {
    let head = this.get_first_note(anchor);
    await this.chain_set_prev_next(tfile, head);
  }
  async chain_insert_node_as_tail(tfile, anchor) {
    let tail = this.get_last_note(anchor);
    await this.chain_set_prev_next(tail, tfile);
  }
  async chain_insert_node_after(tfile, anchor) {
    let t = this;
    console.log(this);
    t.plugin.console_log(t);
    await t.chain_pop_node(tfile);
    let next = this.get_next_note(anchor);
    await this.chain_concat_tfiles([anchor, tfile, next]);
  }
  async chain_insert_node_before(tfile, anchor) {
    await this.chain_pop_node(tfile);
    let prev = this.get_prev_note(anchor);
    await this.chain_concat_tfiles([prev, tfile, anchor]);
  }
  async chain_insert_folder_after(tfile, anchor) {
    if (!tfile.parent || tfile.parent.parent != anchor.parent) {
      return;
    }
    let note = this.get_tfile(tfile.parent.name);
    if (!note) {
      console.log("\u9700\u8981\u8981\u5148\u521B\u5EFA\u540C\u540D\u7B14\u8BB0");
      return;
    }
    await this.plugin.editor.set_frontmatter(
      note,
      "FolderPrevNote",
      `[[${anchor.basename}]]+0.5`
    );
  }
  async chain_suggester_tfiles(tfile = this.current_note, mode = "suggester") {
    let notes = this.get_brothers(tfile);
    if (notes.length == 0) {
      return;
    }
    let files = await this.suggester_sort(notes);
    await this.chain_concat_tfiles(files);
  }
  sort_tfiles(files, field) {
    if (typeof field === "string") {
      if (field === "name") {
        return files.sort(
          (a, b) => a.name.localeCompare(b.name)
        );
      } else if (field === "mtime") {
        return files.sort(
          (a, b) => a.stat.mtime - b.stat.mtime
        );
      } else if (field === "ctime") {
        return files.sort(
          (a, b) => a.stat.ctime - b.stat.ctime
        );
      } else if (field === "chain") {
        return this.sort_tfiles_by_chain(files);
      }
      return files;
    } else if (typeof field === "object") {
      if (field instanceof Array) {
        let nfiles = this.sort_tfiles(files, field[0]);
        if (field.length >= 2) {
          if (field[1] === "x") {
            return nfiles.reverse();
          }
        }
        return nfiles;
      }
    }
    return files;
  }
  sort_tfiles_by_chain(tfiles) {
    let notes = tfiles.filter((f) => f instanceof import_obsidian.TFile);
    let res = [];
    while (notes.length > 0) {
      let note = notes[0];
      let xchain = this.get_chain(note, -1, -1);
      for (let x of xchain) {
        if (notes.contains(x)) {
          res.push(x);
          notes.remove(x);
        }
      }
    }
    let folders = tfiles.filter((f) => f instanceof import_obsidian.TFolder);
    if (folders.length > 0) {
      let indexOf = function(f) {
        if (f instanceof import_obsidian.TFile) {
          return res.indexOf(f);
        } else if (f instanceof import_obsidian.TFolder) {
          return idxs[folders.indexOf(f)];
        } else {
          return -1;
        }
      };
      let idxs = folders.map(
        (f) => this.indexOfFolder(f, res)
      );
      res.push(...folders);
      res = res.sort((a, b) => indexOf(a) - indexOf(b));
    }
    return res;
  }
  sort_tfiles_folder_first(tfiles) {
    let A = tfiles.filter((f) => f instanceof import_obsidian.TFolder).sort((a, b) => a.name.localeCompare(b.name));
    let B = tfiles.filter((f) => f instanceof import_obsidian.TFile);
    return this.plugin.utils.concat_array([A, B]);
  }
  sort_tfiles_by_field(tfiles, field) {
    let res = tfiles.sort(
      (a, b) => {
        let av = this.editor.get_frontmatter(a, field);
        let bv = this.editor.get_frontmatter(b, field);
        return av - bv;
      }
    );
    return res;
  }
  async suggester_sort(tfiles) {
    if (!tfiles) {
      return [];
    }
    if (tfiles.length == 0) {
      return [];
    }
    ;
    let kv = {
      "chain": "chain",
      "name": "name",
      "ctime": "ctime",
      "mtime": "mtime",
      "name \u5012\u5E8F": ["name", "x"],
      "ctime \u5012\u5E8F": ["ctime", "x"],
      "mtime \u5012\u5E8F": ["mtime", "x"]
    };
    let field = await this.tp_suggester(
      Object.keys(kv),
      Object.values(kv)
    );
    if (field == null) {
      return [];
    }
    if (field == "chain") {
      tfiles = this.sort_tfiles(tfiles, "name");
    }
    return this.sort_tfiles(tfiles, field);
  }
  view_sort_by_chain() {
    var _a;
    let view = (_a = this.app.workspace.getLeavesOfType(
      "file-explorer"
    )[0]) == null ? void 0 : _a.view;
    if (!view) {
      return;
    }
    view.sort();
    if (view.ready) {
      for (let path in view.fileItems) {
        let item = view.fileItems[path];
        if (item.vChildren) {
          let files = item.vChildren._children.map((f) => f.file);
          files = this.sort_tfiles_by_chain(files);
          let children = item.vChildren._children.sort(
            (a, b) => files.indexOf(a.file) - files.indexOf(b.file)
          );
          item.vChildren.setChildren(children);
        }
      }
      view.tree.infinityScroll.compute();
    }
  }
};

// src/NCFileExplorer.ts
var import_obsidian2 = require("obsidian");
var chain_sort = function(org_sort) {
  let plugin = app.plugins.getPlugin("note-chain");
  return function(...d) {
    if (plugin) {
      if (plugin == null ? void 0 : plugin.settings.isSortFileExplorer) {
        var e = this.file, t = this.view, i = e.children.slice();
        i = i.filter((x) => x);
        if (i.length > 0) {
          let items = plugin.chain.children[i[0].parent.path];
          if (items) {
            let a2 = items.filter((x) => i.contains(x));
            let b = items.filter((x) => !i.contains(x));
            a2.push(...b);
            i = a2;
          }
        }
        if (plugin.settings.isFolderFirst) {
          i = plugin.chain.sort_tfiles_folder_first(i);
        }
        for (var r = [], o = 0, a = i; o < a.length; o++) {
          var s = a[o], l = t.fileItems[s.path];
          l && r.push(l);
        }
        this.vChildren.setChildren(r);
      } else {
        return org_sort.call(this, ...d);
      }
    } else {
      return org_sort.call(this, ...d);
    }
  };
};
chain_sort_v1 = function(org_sort) {
  let plugin = app.plugins.getPlugin("note-chain");
  return function(...d) {
    if (plugin) {
      if (plugin == null ? void 0 : plugin.settings.isSortFileExplorer) {
        var e = this.file, t = this.view, i = e.children.slice();
        i = i.filter((x) => x);
        i = plugin.chain.sort_tfiles_by_chain(i);
        i = plugin.chain.sort_tfiles_folder_first(i);
        for (var r = [], o = 0, a = i; o < a.length; o++) {
          var s = a[o], l = t.fileItems[s.path];
          l && r.push(l);
        }
        this.vChildren.setChildren(r);
      } else {
        return org_sort.call(this, ...d);
      }
    } else {
      return org_sort.call(this, ...d);
    }
  };
};
var NCFileExplorer = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.chain = plugin.chain;
    this.app = plugin.app;
    this.register();
  }
  register() {
    this.app.workspace.onLayoutReady(() => {
      let folder = new import_obsidian2.TFolder(import_obsidian2.Vault, "");
      let dom = this.file_explorer.createFolderDom(folder).constructor;
      this._FolderDom_ = dom;
      this.org_sort = dom.prototype.sort;
      this.new_sort = chain_sort(this.org_sort);
      this._FolderDom_.prototype.sort = this.new_sort;
      this.sort();
    });
  }
  unregister() {
    if (this.org_sort) {
      console.log("Reset FileExplorer to origin sort function.");
      this._FolderDom_.prototype.sort = this.org_sort;
    }
  }
  get file_explorer() {
    var _a;
    let view = (_a = this.app.workspace.getLeavesOfType(
      "file-explorer"
    )[0]) == null ? void 0 : _a.view;
    return view;
  }
  async sort(nsleep = 0) {
    var _a;
    if ((_a = this.file_explorer) == null ? void 0 : _a.sort) {
      if (nsleep > 0) {
        await this.plugin.utils.sleep(nsleep);
      }
      this.plugin.chain.init_children();
      this.file_explorer.sort();
    }
  }
};

// main.ts
var DEFAULT_SETTINGS = {
  PrevChain: "10",
  NextChain: "10",
  refreshDataView: true,
  refreshTasks: true,
  isSortFileExplorer: true,
  isFolderFirst: true
};
var longform2notechain = (plugin) => ({
  id: "longform2notechain",
  name: "Reset Note Chain by LongForm.",
  callback: () => {
    let curr = plugin.chain.current_note;
    if (curr == null) {
      return;
    }
    app.fileManager.processFrontMatter(
      curr,
      (fm) => {
        if (curr == null) {
          return;
        }
        if (fm["longform"] == null) {
          return;
        }
        let scenes = plugin.utils.concat_array(fm.longform.scenes);
        let ignoredFiles = plugin.utils.concat_array(fm.longform.ignoredFiles);
        ignoredFiles = ignoredFiles.filter((f) => !scenes.contains(f));
        let notes = plugin.utils.concat_array([scenes, ignoredFiles]);
        notes = notes.map((f) => plugin.chain.tp_find_tfile(f));
        if (curr.parent == null) {
          return;
        }
        ;
        let tfiles = plugin.chain.get_tfiles_of_folder(curr.parent).filter((f) => !notes.contains(f));
        notes = plugin.utils.concat_array([tfiles, notes]);
        plugin.chain.chain_concat_tfiles(notes);
      }
    );
  }
});
var longform4notechain = (plugin) => ({
  id: "longform4notechain",
  name: "Reset LongForm Secnes by Note Chain.",
  callback: () => {
    let curr = plugin.chain.current_note;
    if (curr == null) {
      return;
    }
    app.fileManager.processFrontMatter(
      curr,
      (fm) => {
        if (curr == null) {
          return;
        }
        if (curr.parent == null) {
          return;
        }
        ;
        if (fm["longform"] == null) {
          return;
        }
        let notes = plugin.chain.get_tfiles_of_folder(curr.parent);
        notes = plugin.chain.sort_tfiles_by_chain(notes);
        fm.longform.scenes = notes.map((f) => f.basename);
      }
    );
  }
});
var sort_file_explorer = (plugin) => ({
  id: "sort_file_explorer",
  name: "Sort File Explorer by Note Chain.",
  callback: async () => {
    await plugin.explorer.sort();
  }
});
var open_notes_smarter = (plugin) => ({
  id: "open_notes_smarter",
  name: "Open note smarter",
  callback: () => {
    plugin.open_note_smarter();
  }
});
var sugguster_open_note = (plugin) => ({
  id: "sugguster_open_note",
  name: "Open note",
  callback: () => {
    plugin.chain.sugguster_open_note();
  }
});
var open_prev_notes = (plugin) => ({
  id: "open_prev_notes",
  name: "Open prev note",
  callback: () => {
    plugin.chain.open_prev_notes();
  }
});
var open_next_notes = (plugin) => ({
  id: "open_next_notes",
  name: "Open next note",
  callback: () => {
    plugin.chain.open_next_notes();
  }
});
var clear_inlinks = (plugin) => ({
  id: "clear_inlinks",
  name: "Clear inlinks of current file",
  callback: () => {
    plugin.clear_inlinks();
  }
});
var move_file_to_another_folder = (plugin) => ({
  id: "move_file_to_another_folder",
  name: "Move current file to another folder",
  callback: () => {
    plugin.chain.cmd_move_file_to_another_folder();
  }
});
var replace_notes_with_regx = (plugin) => ({
  id: "replace_notes_with_regx",
  name: "Replace by regex",
  callback: () => {
    plugin.replace_notes_with_regx();
  }
});
var chain_insert_node = (plugin) => ({
  id: "chain_insert_node",
  name: "Insert node of chain",
  callback: async () => {
    await plugin.cmd_chain_insert_node();
    await plugin.explorer.sort(500);
  }
});
var chain_set_seq_note = (plugin) => ({
  id: "chain_set_seq_note",
  name: "Reset the chain of current folder!",
  callback: async () => {
    await plugin.chain.chain_suggester_tfiles();
    plugin.explorer.sort();
  }
});
var create_new_note = (plugin) => ({
  id: "create_new_note",
  name: "Create new note.",
  callback: async () => {
    let targets = {
      "\u6DFB\u52A0\u540E\u7F6E\u7B14\u8BB0": "chain_insert_node_after",
      "\u94FE\u5C3E\u6DFB\u52A0\u7B14\u8BB0": "chain_insert_node_as_tail",
      "\u6DFB\u52A0\u524D\u7F6E\u7B14\u8BB0": "chain_insert_node_before",
      "\u94FE\u5934\u6DFB\u52A0\u7B14\u8BB0": "chain_insert_node_as_head",
      "\u65E0\u94FE\u63A5": `null`
    };
    let target = await plugin.chain.tp_suggester(
      plugin.utils.array_prefix_id(Object.keys(targets)),
      Object.values(targets),
      true,
      "\u9009\u62E9\u7B14\u8BB0\u7C7B\u578B."
    );
    if (!target) {
      return;
    }
    let name = await plugin.chain.tp_prompt("\u8BF7\u8F93\u5165\u6587\u4EF6\u540D");
    if (name) {
      let curr = plugin.chain.current_note;
      if (curr && curr.parent) {
        let path = curr.parent.path + "/" + name + ".md";
        let dst = await plugin.chain.get_tfile(path);
        if (dst == null) {
          let func = plugin.utils.get_tp_func(plugin.app, "tp.file.create_new");
          dst = await func(
            "",
            name,
            false,
            curr.parent
          );
          await plugin.utils.sleep(300);
          if (!(target === "null")) {
            await plugin.chain[target](dst, curr);
          }
          await plugin.utils.sleep(300);
          await plugin.chain.open_note(dst);
          await plugin.explorer.sort();
        }
      }
    }
  }
});
var commandBuilders = [
  open_prev_notes,
  open_next_notes,
  open_notes_smarter,
  sugguster_open_note,
  longform2notechain,
  longform4notechain,
  sort_file_explorer,
  clear_inlinks,
  replace_notes_with_regx,
  move_file_to_another_folder,
  chain_insert_node,
  chain_set_seq_note,
  create_new_note
];
function addCommands(plugin) {
  commandBuilders.forEach((c) => {
    plugin.addCommand(c(plugin));
  });
}
var NoteChainPlugin = class extends import_obsidian3.Plugin {
  async onload() {
    this.debug = true;
    await this.loadSettings();
    this.utils = (init_utils(), __toCommonJS(utils_exports));
    this.ob = require("obsidian");
    this.app.nc = this;
    this.editor = new NCEditor(this.app);
    this.chain = new NoteChain(this, this.editor);
    this.explorer = new NCFileExplorer(this);
    addCommands(this);
    this.addSettingTab(new NCSettingTab(this.app, this));
    console.log("Zig-Holding:regeister ufunc_on_file_open");
    this.registerEvent(
      this.app.workspace.on("file-open", this.ufunc_on_file_open)
    );
    this.registerEvent(this.app.vault.on(
      "delete",
      async (file) => {
        if (this.debug) {
          console.log("delete...");
        }
        await this.chain.chain_pop_node(file);
        await this.explorer.sort();
      }
    ));
    this.registerEvent(this.app.vault.on(
      "create",
      () => {
        if (this.debug) {
          console.log("create...");
        }
        this.explorer.sort();
      }
    ));
    this.registerEvent(this.app.vault.on(
      "rename",
      (file, oldPath) => {
        if (this.debug) {
          console.log("rename...");
        }
        this.explorer.sort();
      }
    ));
  }
  onunload() {
    console.log("Zig-Holding:unregeister ufunc_on_file_open");
    this.app.workspace.off("file-open", this.ufunc_on_file_open);
    this.explorer.unregister();
    this.explorer.sort();
  }
  console_log(...d) {
    if (this.debug) {
      console.log(...d);
    }
  }
  async ufunc_on_file_open(file) {
    let zh = await app.plugins.getPlugin("note-chain");
    if (!zh) {
      return;
    }
    if (zh.settings.refreshDataView) {
      zh.app.commands.executeCommandById(
        "dataview:dataview-force-refresh-views"
      );
    }
    if (zh.settings.refreshTasks) {
      let target = await app.plugins.getPlugin("obsidian-tasks-plugin");
      target.cache.notifySubscribers();
    }
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async clear_inlinks(tfile = this.chain.current_note, mode = "suggester") {
    let notes = this.chain.get_inlinks(tfile);
    if (notes.length) {
      if (mode === "suggester") {
        mode = await this.chain.tp_suggester(
          ["\u5220\u9664\u94FE\u63A5", "\u66FF\u6362\u94FE\u63A5", "\u5220\u9664\u6BB5\u843D"],
          [["link", "del"], ["link", "rep"], ["para", "del"]]
        );
      }
      let reg = this.editor.regexp_link(tfile, mode[0]);
      if (reg) {
        for (let note of notes) {
          let target;
          if (mode[1] === "rep") {
            target = tfile.basename;
          } else {
            target = "";
          }
          this.editor.replace(note, reg, target);
        }
      }
    }
  }
  async replace_notes_with_regx() {
    let notes = await this.chain.suggester_notes();
    if ((notes == null ? void 0 : notes.length) > 0) {
      try {
        let regs = await this.chain.tp_prompt("\u8981\u66FF\u6362\u7684\u6B63\u5219\u8868\u8FBE\u5F0F");
        if (regs == null) {
          return;
        }
        let reg = new RegExp(regs, "g");
        let target = await this.chain.tp_prompt("\u76EE\u6807\u5B57\u7B26\u4E32");
        if (target == null) {
          return;
        }
        target = target.trim().replace(
          /\\n/g,
          "\n"
        );
        console.log(regs, reg, target);
        for (let note of notes) {
          await this.editor.replace(note, reg, target);
        }
      } catch (error) {
        console.log(error);
      }
    }
  }
  async cmd_chain_insert_node() {
    let curr = this.chain.current_note;
    if (curr == null) {
      return;
    }
    let notes = await this.chain.suggester_notes(curr, false);
    if (!notes) {
      return;
    }
    notes = this.chain.sort_tfiles(notes, ["mtime", "x"]);
    notes = this.chain.sort_tfiles_by_chain(notes);
    if (notes.length == 0) {
      return;
    }
    const note = await this.chain.tp_suggester(
      (file) => this.tfile_to_string(file, [], ""),
      notes
    );
    if (!note) {
      return;
    }
    let sitems = [
      "insert_node_after",
      "insert_node_before",
      "insert_node_as_head",
      "insert_node_as_tail",
      "insert_folder_after"
    ];
    let mode = await this.chain.tp_suggester(
      sitems,
      sitems,
      false,
      "Select Node Insert Mode."
    );
    if (!mode) {
      return;
    }
    console.log(typeof mode, mode);
    if (mode === "insert_node_as_head") {
      await this.chain.chain_insert_node_as_head(curr, note);
    } else if (mode === "insert_node_as_tail") {
      await this.chain.chain_insert_node_as_tail(curr, note);
    } else if (mode === "insert_node_before") {
      await this.chain.chain_insert_node_before(curr, note);
    } else if (mode === "insert_node_after") {
      await this.chain.chain_insert_node_after(curr, note);
    } else if (mode === "insert_folder_after") {
      await this.chain.chain_insert_folder_after(curr, note);
    } else {
      return;
    }
  }
  tfile_to_string(tfile, fields, seq) {
    let items = new Array();
    if (tfile == this.chain.current_note) {
      items.push("\u{1F3E0}" + tfile.basename);
    } else {
      items.push(tfile.basename);
    }
    for (let field of fields) {
      try {
        items.push(this.editor.get_frontmatter(tfile, field));
      } catch (error) {
        items.push("-");
      }
    }
    return items.join(seq);
  }
  async open_note_smarter() {
    let curr = this.chain.current_note;
    let notes = await this.chain.suggester_notes(curr, false);
    notes = this.chain.sort_tfiles(notes, ["mtime", "x"]);
    notes = this.chain.sort_tfiles_by_chain(notes);
    if (notes.length > 0) {
      let note = await this.chain.tp_suggester(
        (file) => this.chain.tfile_to_string(file),
        notes
      );
      if (note) {
        await this.chain.open_note(note);
      }
    }
  }
};
var NCSettingTab = class extends import_obsidian3.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian3.Setting(containerEl).setName("Sort File Explorer").setDesc("Sort File Explorer by Chain").addToggle(
      (text) => text.setValue(this.plugin.settings.isSortFileExplorer).onChange(async (value) => {
        this.plugin.settings.isSortFileExplorer = value;
        await this.plugin.saveSettings();
        this.plugin.explorer.file_explorer.sort();
      })
    );
    new import_obsidian3.Setting(containerEl).setName("Sort Folder First").setDesc("Sort File Explorer Folder First").addToggle(
      (text) => text.setValue(this.plugin.settings.isFolderFirst).onChange(async (value) => {
        this.plugin.settings.isFolderFirst = value;
        await this.plugin.saveSettings();
        this.plugin.explorer.file_explorer.sort();
      })
    );
    new import_obsidian3.Setting(containerEl).setName("PrevChain").setDesc("Number of Prev Notes to show?").addText((text) => text.setValue(this.plugin.settings.PrevChain).onChange(async (value) => {
      this.plugin.settings.PrevChain = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(containerEl).setName("NextChain").setDesc("Number of Next Notes to show?").addText((text) => text.setValue(this.plugin.settings.NextChain).onChange(async (value) => {
      this.plugin.settings.NextChain = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(containerEl).setName("refreshDataView").setDesc("Refresh Dataview while open new file?").addToggle(
      (text) => text.setValue(this.plugin.settings.refreshDataView).onChange(async (value) => {
        this.plugin.settings.refreshDataView = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian3.Setting(containerEl).setName("refreshTasks").setDesc("Refresh Tasks while open new file?").addToggle(
      (text) => text.setValue(this.plugin.settings.refreshTasks).onChange(async (value) => {
        this.plugin.settings.refreshTasks = value;
        await this.plugin.saveSettings();
      })
    );
  }
};
//# sourceMappingURL=data:application/json;base64,
